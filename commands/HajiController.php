<?php
/**
 * @link http://www.yiiframework.com/
 * @copyright Copyright (c) 2008 Yii Software LLC
 * @license http://www.yiiframework.com/license/
 */

namespace app\commands;

use app\components\DateTimeUtility;
use app\components\DBUtility;
use app\components\Utility;
use app\models\BankReconciliation;
use app\models\Brand;
use app\models\BrandNew;
use app\models\Buyer;
use app\models\CashBook;
use app\models\CashHandReceived;
use app\models\ClientPaymentDetails;
use app\models\ClientPaymentHistory;
use app\models\CustomerAccount;
use app\models\CustomerWithdraw;
use app\models\DepositBook;
use app\models\Employee;
use app\models\EmployeeDesignation;
use app\models\Expense;
use app\models\ExpenseType;
use app\models\Item;
use app\models\LcPayment;
use app\models\LcPaymentType;
use app\models\PaymentType;
use app\models\ProductItemsPrice;
use app\models\ProductStatement;
use app\models\ProductUnit;
use app\models\SalaryHistory;
use app\models\Sales;
use app\models\SalesDetails;
use app\models\SalesReturn;
use app\models\SalesReturnDetails;
use app\models\Serialize;
use app\models\Size;
use app\models\User;
use app\models\Bank;
use app\models\Branch;
use app\models\City;
use app\models\Client;
use app\models\Lc;
use app\models\ProductStock;
use app\models\ProductStockItems;
use app\models\Transport;
use app\models\Warehouse;
use app\models\Withdraw;
use Yii;
use yii\console\Controller;

/**
 * This command echoes the first argument that you have entered.
 *
 * This command is provided as an example for you to learn how to create console commands.
 *
 * @author Qiang Xue <qiang.xue@gmail.com>
 * @since 2.0
 */
class HajiController extends Controller
{
    const REMARKS_COMMENT = 'Migrate By Script';
    const OUTLET_ID = 2;

    public $userId = 1;

    public $lastCustomerId = 0;
    public $lastSalesId = 0;
    public $lastSalesReturnId = 0;
    public $lastUserId = 0;
    public $lastPaymentHistoryId = 0;
    public $lc = 0;

    public function init()
    {
        ini_set('max_execution_time', -1);

        $client  = Client::find()->orderBy('client_id DESC')->one();
        if($client){
            $this->lastCustomerId = $client->client_id;
        }

        $user  = User::find()->orderBy('user_id DESC')->one();
        if($user){
            $this->lastUserId = $user->user_id;
        }

        $sales  = Sales::find()->orderBy('sales_id DESC')->one();
        if($sales){
            $this->lastSalesId = $sales->sales_id;
        }

        $salesReturn  = SalesReturn::find()->orderBy('sales_return_id DESC')->one();
        if($salesReturn){
            $this->lastSalesReturnId = $salesReturn->sales_return_id;
        }

        $clientPaymentHistory  = ClientPaymentHistory::find()->orderBy('client_payment_history_id DESC')->one();
        if($clientPaymentHistory){
            $this->lastPaymentHistoryId = $clientPaymentHistory->client_payment_history_id;
        }

        $this->createLC();

        parent::init(); // TODO: Change the autogenerated stub
    }

    private function createLC()
    {
        $model = Lc::find()->where(['lc_name' => 'Migration'])->one();
        if ($model) {
            $this->lc = $model->lc_id;
        } else {
            $model = new Lc();
            $model->lc_name = 'Migration';
            $model->lc_number = '1234567890';
            $model->remarks = 'Remarks';
            $model->branch_id = $this->branchId;
            $model->user_id = $this->userId;
            if ($model->save()) {
                $this->lc = $model->lc_id;
            }
        }

    }

    public function CashBook()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start Cash Book Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `id` ) AS total FROM `cash_book`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $cashBookRows = [];

            echo PHP_EOL . "Query all Cash Book data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $cashBooks = Yii::$app->db2->createCommand("SELECT * FROM `cash_book` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($cashBooks as $cashBook) {
                $cashBookRows[] = [
                    'remarks' => $cashBook['remarks'],
                    'outletId' => self::OUTLET_ID,
                    'reference_id' => $cashBook['reference_id'],
                    'ref_user_id' => $cashBook['ref_user_id']+$this->lastCustomerId,
                    'source' => $cashBook['source'],
                    'cash_in' => $cashBook['cash_in'],
                    'cash_out' => $cashBook['cash_out'],
                    'created_at' => $cashBook['created_at'],
                    'updated_at' => $cashBook['updated_at'],
                ];

            }

            $cashBookNewData = new CashBook();
            echo PHP_EOL . "Start Inserting Cash Book data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(CashBook::tableName(), [
                'remarks', 'outletId', 'reference_id', 'ref_user_id',
                'source', 'cash_in', 'cash_out', 'created_at', 'updated_at',
            ], $cashBookRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function Client()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;
        echo PHP_EOL . "Start Client Importing" . PHP_EOL;
        $record = Yii::$app->db2->createCommand("SELECT count( `client_id` ) AS total FROM `client`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $clientRows = [];

            echo PHP_EOL . "Query all Client data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $clients = Yii::$app->db2->createCommand("SELECT * FROM `client` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($clients as $client) {
                $clientRows[] = [
                    'client_id' => (int)$client['client_id']+ $this->lastCustomerId,
                    'outletId' => self::OUTLET_ID,
                    'client_name' => $client['client_name'],
                    'client_city' => $client['client_city'],
                    'client_address1' => $client['client_address1'],
                    'client_address2' => $client['client_address2'],
                    'client_contact_number' => $client['client_contact_number'],
                    'client_contact_person' => $client['client_contact_person'],
                    'client_contact_person_number' => $client['client_contact_person_number'],
                    'email' => $client['email'],
                    'client_type' => $client['client_type'],
                    'client_balance' => $client['client_balance'],
                ];

            }

            $clientNewData = new Client();
            echo PHP_EOL . "Start Inserting Client data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(Client::tableName(), [
                'client_id', 'outletId', 'client_name', 'client_city', 'client_address1',
                'client_address2', 'client_contact_number', 'client_contact_person',
                'client_contact_person_number', 'email', 'client_type', 'client_balance',
            ], $clientRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function ClientPaymentDetails()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start Client Payment Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `client_payment_details_id` ) AS total FROM `client_payment_details`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $clientPaymentRows = [];

            echo PHP_EOL . "Query all Client Payment data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $clientPayments = Yii::$app->db2->createCommand("SELECT * FROM `client_payment_details` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($clientPayments as $clientPayment) {
                $clientPaymentRows[] = [
                    //'client_payment_details_id' => $clientPayment['client_payment_details_id'],
                    'sales_id' => $clientPayment['sales_id']+$this->lastSalesId,
                    'client_id' => $clientPayment['client_id']+$this->lastCustomerId,
                    'payment_history_id' => $clientPayment['payment_history_id']+$this->lastPaymentHistoryId,
                    'paid_amount' => $clientPayment['paid_amount'],
                    'payment_type' => $clientPayment['payment_type'],
                    'created_at' => $clientPayment['created_at'],
                    'updated_at' => $clientPayment['updated_at'],
                ];

            }

            $clientPaymentNewData = new ClientPaymentDetails();
            echo PHP_EOL . "Start Inserting Client Payment data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(ClientPaymentDetails::tableName(), [
                'sales_id', 'client_id', 'payment_history_id', 'paid_amount',
                'payment_type', 'created_at', 'updated_at',
            ], $clientPaymentRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function ClientPaymentHistory()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start Client Payment Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `client_payment_history_id` ) AS total FROM `client_payment_history`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $clientPaymentRows = [];

            echo PHP_EOL . "Query all Client Payment History data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $clientPayments = Yii::$app->db2->createCommand("SELECT * FROM `client_payment_history` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($clientPayments as $clientPayment) {
                $clientPaymentRows[] = [
                    'client_payment_history_id' => $clientPayment['client_payment_history_id']+$this->lastPaymentHistoryId,
                    'client_id' => $clientPayment['client_id']+$this->lastCustomerId,
                    'outletId' => self::OUTLET_ID,
                    'user_id' => $clientPayment['user_id']+$this->userId,
                    'updated_by' => $clientPayment['updated_by']+$this->userId,
                    'sales_id' => $clientPayment['sales_id']+$this->lastSalesId,
                    'received_amount' => $clientPayment['received_amount'],
                    'remaining_amount' => $clientPayment['remaining_amount'],
                    'remarks' => $clientPayment['remarks'],
                    'received_type' => $clientPayment['received_type'],
                    'extra' => $clientPayment['extra'],
                    'received_at' => $clientPayment['received_at'],
                    'updated_at' => $clientPayment['updated_at'],
                    'payment_type_id' => $clientPayment['payment_type_id'],
                    'status' => $clientPayment['status'],
                ];

            }

            $clientPaymentNewData = new ClientPaymentHistory();
            echo PHP_EOL . "Start Inserting Client Payment History data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(ClientPaymentHistory::tableName(), [
                'client_payment_history_id', 'client_id', 'outletId', 'user_id',
                'updated_by', 'sales_id', 'received_amount', 'remaining_amount', 'remarks',
                'received_type', 'extra', 'received_at', 'updated_at', 'payment_type_id', 'status',
            ], $clientPaymentRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function CustomerAccount()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start Customer Account Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `id` ) AS total FROM `customer_account`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $customerAccountsRows = [];

            echo PHP_EOL . "Query all Customer Account data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $customerAccounts = Yii::$app->db2->createCommand("SELECT * FROM `customer_account` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($customerAccounts as $customerAccount) {
                $customerAccountsRows[] = [
                    'id' => null,
                    //'outletId' => self::OUTLET_ID,
                    'sales_id' => $customerAccount['sales_id']+$this->lastSalesId,
                    'memo_id' => $customerAccount['memo_id'],
                    'client_id' => $customerAccount['client_id']+$this->lastCustomerId,
                    'type' => $customerAccount['type'],
                    'payment_type' => $customerAccount['payment_type'],
                    'payment_history_id' => $customerAccount['payment_history_id']+$this->lastPaymentHistoryId,
                    'account' => $customerAccount['account'],
                    'debit' => $customerAccount['debit'],
                    'credit' => $customerAccount['credit'],
                    'balance' => $customerAccount['balance'],
                    'date' => $customerAccount['date'],
                ];

            }

            $customerAccountNewData = new CustomerAccount();
            echo PHP_EOL . "Start Inserting Customer Account data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(CustomerAccount::tableName(), [
                'id', 'sales_id', 'memo_id', 'client_id', 'type', 'payment_type',
                'payment_history_id', 'account', 'debit', 'credit', 'balance', 'date'
            ], $customerAccountsRows)->execute();

            $offset = $offset + $limit;
        }
    }

    public function CustomerWithdraw()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start Customer Withdraw Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `id` ) AS total FROM `customer_withdraw`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $customerAccountsRows = [];

            echo PHP_EOL . "Query all Customer Withdraw data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $customerAccounts = Yii::$app->db2->createCommand("SELECT * FROM `customer_withdraw` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($customerAccounts as $customerAccount) {
                $customerAccountsRows[] = [
                    //'id' => $customerAccount['id'],
                    'payment_history_id' => $customerAccount['payment_history_id']+$this->lastPaymentHistoryId,
                    'outletId' => self::OUTLET_ID,
                    'client_id' => $customerAccount['client_id']+$this->lastCustomerId,
                    'amount' => $customerAccount['amount'],
                    'remarks' => $customerAccount['remarks'],
                    'created_by' => $customerAccount['created_by']+$this->lastUserId,
                    'updated_by' => $customerAccount['updated_by']+$this->lastUserId,
                    'status' => $customerAccount['status'],
                    'type' => $customerAccount['type'],
                    'extra' => $customerAccount['extra'],
                    'created_at' => $customerAccount['created_at'],
                    'updated_at' => $customerAccount['updated_at'],
                ];
            }

            echo PHP_EOL . "Start Inserting Customer Withdraw data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(CustomerWithdraw::tableName(), [
                 'payment_history_id', 'outletId', 'client_id','amount',
                'remarks', 'created_by', 'updated_by','status','type',
                'extra','created_at','updated_at'
            ], $customerAccountsRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function DepositBook()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start Deposit Book Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `id` ) AS total FROM `deposit_book`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $depositBookRows = [];

            echo PHP_EOL . "Query all Deposit Book data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $models = Yii::$app->db2->createCommand("SELECT * FROM `deposit_book` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($models as $model) {
                $depositBookRows[] = [
                    'id' => null,
                    'outletId' => self::OUTLET_ID,
                    'bank_id' => $model['bank_id'],
                    'branch_id' => $model['branch_id'],
                    'payment_type_id' => $model['payment_type_id'],
                    'ref_user_id' => $model['ref_user_id']+$this->lastUserId,
                    'deposit_in' => $model['deposit_in'],
                    'deposit_out' => $model['deposit_out'],
                    'reference_id' => $model['reference_id'],
                    'source' => $model['source'],
                    'remarks' => $model['remarks'],
                    'created_at' => $model['created_at'],
                    'updated_at' => $model['updated_at'],
                ];

            }

            $depositBooksNewData = new DepositBook();
            echo PHP_EOL . "Start Inserting Deposit Book data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(DepositBook::tableName(), $depositBooksNewData->attributes(), $depositBookRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function Expense()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start Expense Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `expense_id` ) AS total FROM `expense`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $expenseRows = [];

            echo PHP_EOL . "Query all Expense data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $expenses = Yii::$app->db2->createCommand("SELECT * FROM `expense` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($expenses as $expense) {
                $expenseRows[] = [
                    //'expense_id' => $expense['expense_id'],
                    'expense_type_id' => $expense['expense_type_id'],
                    'outletId' => self::OUTLET_ID,
                    'type' => $expense['type'],
                    'ref_id' => $expense['ref_id'],
                    'user_id' => $expense['user_id']+$this->userId,
                    'updated_by' => $expense['updated_by']+$this->userId,
                    'expense_amount' => $expense['expense_amount'],
                    'expense_remarks' => $expense['expense_remarks'],
                    'status' => $expense['status'],
                    'extra' => $expense['extra'],
                    'source' => $expense['source'],
                    'created_at' => $expense['created_at'],
                    'updated_at' => $expense['updated_at'],
                ];

            }

            echo PHP_EOL . "Start Inserting Expense data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(Expense::tableName(), [
                'expense_type_id', 'outletId', 'type', 'ref_id', 'user_id', 'updated_by',
                'expense_amount', 'expense_remarks', 'status', 'extra', 'source', 'created_at', 'updated_at',
            ], $expenseRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function Sales()
    {
        $offset = 0;
        $limit = 3000;

        $totalRecords = 0;

        echo PHP_EOL . "Start Sales Invoice Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `sales_id` ) AS total FROM `sales`")->queryAll();
        $totalRecords = $record[0]['total'];
        while ($totalRecords > $offset) {

            $salesRows = [];

            echo PHP_EOL . "Query all Sales data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $sales = Yii::$app->db2->createCommand("SELECT * FROM `sales` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($sales as $sale) {
                $salesRows[] = [
                    'sales_id' => $sale['sales_id']+$this->lastSalesId,
                    'outletId' => self::OUTLET_ID,
                    'memo_id' => $sale['sales_id'],
                    'client_id' => $sale['client_id']+$this->lastCustomerId,
                    'client_name' => $sale['client_name'],
                    'client_mobile' => $sale['client_mobile'],
                    'client_type' => $sale['client_type'],
                    'user_id' => $sale['user_id']+$this->lastUserId,
                    'updated_by' => $sale['updated_by'],
                    'contact_number' => $sale['contact_number'],
                    'received_amount' => $sale['received_amount'],
                    'reconciliation_amount' => $sale['reconciliation_amount'],
                    'sales_return_amount' => $sale['sales_return_amount'],
                    'paid_amount' => $sale['paid_amount'],
                    'due_amount' => $sale['due_amount'],
                    'discount_amount' => $sale['discount_amount'],
                    'total_amount' => $sale['total_amount'],
                    'remarks' => $sale['remarks'],
                    'type' => $sale['type'],
                    'payment_type' => $sale['payment_type'],
                    'bank' => $sale['bank'],
                    'branch' => $sale['branch'],
                    'transport_id' => $sale['transport_id'],
                    'transport_name' => $sale['transport_name'],
                    'tracking_number' => $sale['tracking_number'],
                    'status' => $sale['status'],
                    'created_at' => $sale['created_at'],
                    'updated_at' => $sale['updated_at'],
                ];

            }

            $salesNewData = new Sales();
            echo PHP_EOL . "Start Inserting Sales data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(Sales::tableName(), $salesNewData->attributes(), $salesRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function SalesDetails()
    {
        $offset = 0;
        $limit = 3000;

        $totalRecords = 0;

        echo PHP_EOL . "Start Sales Invoice Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `sales_details_id` ) AS total FROM `sales_details`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $salesRows = [];

            echo PHP_EOL . "Query all Sales data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $sales = Yii::$app->db2->createCommand("SELECT * FROM `sales_details` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($sales as $sale) {
                $salesRows[] = [
                    'sales_details_id' => null,
                    'outletId' => self::OUTLET_ID,
                    'sales_id' => $sale['sales_id']+$this->lastSalesId,
                    'item_id' => $sale['item_id'],
                    'brand_id' => $sale['brand_id'],
                    'size_id' => $sale['size_id'],
                    'unit' => $sale['unit'],
                    'cost_amount' => $sale['cost_amount'],
                    'sales_amount' => $sale['sales_amount'],
                    'total_amount' => $sale['total_amount'],
                    'quantity' => $sale['quantity'],
                    'challan_unit' => $sale['challan_unit'],
                    'challan_quantity' => $sale['challan_quantity'],
                    'status' => $sale['status'],
                ];
            }

            $salesNewData = new SalesDetails();
            echo PHP_EOL . "Start Inserting Sales data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(SalesDetails::tableName(), $salesNewData->attributes(), $salesRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function SalesReturn()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start sales_return Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `sales_return_id` ) AS total FROM `sales_return`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $salesReturnNewDataRows = [];

            echo PHP_EOL . "Query all sales_return data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $sales_returns = Yii::$app->db2->createCommand("SELECT * FROM `sales_return` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($sales_returns as $sales_return) {
                $salesReturnNewDataRows[] = [
                    'sales_return_id' => $sales_return['sales_return_id']+$this->lastSalesReturnId,
                    'outletId' => self::OUTLET_ID,
                    'user_id' => $sales_return['user_id']+$this->lastUserId,
                    'sales_id' => $sales_return['sales_id']+$this->lastSalesId,
                    'client_id' => $sales_return['client_id']+$this->lastCustomerId,
                    'memo_id' => $sales_return['sales_id'],
                    'client_name' => $sales_return['client_name'],
                    'client_mobile' => $sales_return['client_mobile'],
                    'refund_amount' => $sales_return['refund_amount'],
                    'cut_off_amount' => $sales_return['cut_off_amount'],
                    'total_amount' => $sales_return['total_amount'],
                    'remarks' => $sales_return['remarks'],
                    'type' => $sales_return['type'],
                    'payment_history_id' => $sales_return['payment_history_id'],
                    'payment_status' => $sales_return['payment_status'],
                    'status' => $sales_return['status'],
                    'updated_by' => $sales_return['updated_by'],
                    'created_at' => $sales_return['created_at'],
                    'updated_at' => $sales_return['updated_at'],
                ];

            }

            $sales_returnNewData = new SalesReturn();
            echo PHP_EOL . "Start Inserting sales_return data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(SalesReturn::tableName(), $sales_returnNewData->attributes(), $salesReturnNewDataRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function SalesReturnDetails()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start sales_return_details Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `sales_return_details_id` ) AS total FROM `sales_return_details`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $salesReturnDetailsNewDataRows = [];

            echo PHP_EOL . "Query all sales_return_details data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $sales_returns_details = Yii::$app->db2->createCommand("SELECT * FROM `sales_return_details` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($sales_returns_details as $sales_returns_detail) {
                $salesReturnDetailsNewDataRows[] = [
                    'sales_return_details_id' => null,
                    'sales_return_id' => $sales_returns_detail['sales_return_id']+$this->lastSalesReturnId,
                    'sales_id' => $sales_returns_detail['sales_id']+$this->lastSalesId,
                    'item_id' => $sales_returns_detail['item_id'],
                    'brand_id' => $sales_returns_detail['brand_id'],
                    'size_id' => $sales_returns_detail['size_id'],
                    'refund_amount' => $sales_returns_detail['refund_amount'],
                    'sales_amount' => $sales_returns_detail['sales_amount'],
                    'total_amount' => $sales_returns_detail['total_amount'],
                    'quantity' => $sales_returns_detail['quantity'],
                ];

            }

            $sales_return_detailsNewData = new SalesReturnDetails();
            echo PHP_EOL . "Start Inserting sales_return_details data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(SalesReturnDetails::tableName(), $sales_return_detailsNewData->attributes(), $salesReturnDetailsNewDataRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function SerializeData()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start Serialize Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `id` ) AS total FROM `serialize`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $serializeNewDataRows = [];

            echo PHP_EOL . "Query all Serialize data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $serializes = Yii::$app->db2->createCommand("SELECT * FROM `serialize` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($serializes as $serialize) {
                $serializeNewDataRows[] = [
                    'source' => $serialize['source'],
                    'refId' => $serialize['refId'],
                    'data' => $serialize['data'],
                    'created_by' => $serialize['created_by'],
                    'approved_by' => $serialize['approved_by'],
                    'status' => $serialize['status'],
                    'created_at' => $serialize['created_at'],
                    'updated_at' => $serialize['updated_at'],
                ];

            }

            $serializesNewData = new Serialize();
            echo PHP_EOL . "Start Inserting Serialize data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(Serialize::tableName(), [
                'source', 'refId', 'data', 'created_by', 'approved_by',
                'status', 'created_at', 'updated_at'], $serializeNewDataRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function User()
    {
        echo PHP_EOL . "Start Creating super admin...." . PHP_EOL;
        $data = [];
        $users = Yii::$app->db2->createCommand("SELECT * FROM `user` ")->queryAll();
        foreach ($users as $user) {

            if (strtoupper($user['username']) === 'SUPERADMIN') {
                $data[] = [
                    $user['user_id']+$this->lastUserId,
                    $user['first_name'],
                    $user['last_name'],
                    'superadmin2',
                    $user['email'],
                    '$2y$13$a4Srf3B4L/ludGaiugopGOfBPg6q.EMmDgMscO4dXoLL.I.D5sPC6',
                    '',
                    1,
                    DateTimeUtility::getDate('', 'Y-m-d H-i-s'),
                    DateTimeUtility::getDate('', 'Y-m-d H-i-s'),
                ];
            } else {
                $data[] = [
                    $user['user_id']+$this->lastUserId,
                    $user['first_name'],
                    $user['last_name'],
                    $user['username'],
                    $user['email'],
                    $user['password_hash'],
                    '',
                    1,
                    DateTimeUtility::getDate('', 'Y-m-d H-i-s'),
                    DateTimeUtility::getDate('', 'Y-m-d H-i-s'),
                ];
            }
        }

        Yii::$app->db->createCommand()->batchInsert(User::tableName(), [
            'user_id', 'first_name', 'last_name', 'username', 'email', 'password_hash',
            'user_image', 'status', 'created_at', 'updated_at'
        ], $data)->execute();


        echo "successfully added superadmin" . PHP_EOL;
    }

    public function Withdraw()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start Withdraw Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `id` ) AS total FROM `withdraw`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $withdrawNewDataRows = [];

            echo PHP_EOL . "Query all Withdraw data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $withdraws = Yii::$app->db2->createCommand("SELECT * FROM `withdraw` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($withdraws as $withdraw) {
                $withdrawNewDataRows[] = [
                    'id' => null,
                    'user_id' => $withdraw['user_id']+$this->lastUserId,
                    'outletId' => self::OUTLET_ID,
                    'withdraw_amount' => $withdraw['withdraw_amount'],
                    'remarks' => $withdraw['remarks'],
                    'type' => $withdraw['type'],
                    'bank_id' => $withdraw['bank_id'],
                    'branch_id' => $withdraw['branch_id'],
                    'status' => $withdraw['status'],
                    'created_at' => $withdraw['created_at'],
                    'updated_at' => $withdraw['updated_at'],
                ];

            }

            $withdrawNewData = new Withdraw();
            echo PHP_EOL . "Start Inserting Withdraw data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(Withdraw::tableName(), $withdrawNewData->attributes(), $withdrawNewDataRows)->execute();

            $offset = $offset + $limit;
        }

    }

    private function movement($statement, $items)
    {
        $transaction = Yii::$app->db->beginTransaction();

        echo PHP_EOL . "Call Movement " . count($statement) . PHP_EOL;

        try {

            $productStock = new ProductStock();
            $productStock->setScenario('migration');
            $productStock->type = ProductStock::TYPE_MIGRATION;
            $productStock->invoice_no = Utility::genInvoice('STMH');
            $productStock->status = ProductStock::STATUS_ACTIVE;
            $productStock->user_id = 1;
            if ($productStock->save()) {

                for ($i = 0; $i < count($statement); $i++) {
                    $statement[$i]['reference_id'] = $productStock->product_stock_id;
                    $items[$i]['product_stock_id'] = $productStock->product_stock_id;
                }

                $totalBulkInsert = Yii::$app->db->createCommand()->batchInsert(ProductStatement::tableName(), [
                    'item_id', 'brand_id', 'size_id', 'quantity', 'type', 'remarks',
                    'reference_id', 'user_id', 'created_at', 'updated_at',
                ], $statement)->execute();

                $totalStatementInsert = Yii::$app->db->createCommand()->batchInsert(ProductStockItems::tableName(), [
                    'product_stock_id','item_id', 'brand_id', 'size_id', 'cost_price',
                    'wholesale_price', 'retail_price', 'previous_quantity',
                    'new_quantity', 'total_quantity', 'status'
                ], $items)->execute();

                if ($totalBulkInsert && $totalStatementInsert) {
                    $transaction->commit();
                } else {
                    $transaction->rollBack();
                }

            } else {
                print_r($productStock->getErrors());
                die();
            }
        } catch (\Exception $e) {
            print_r($e);
            die();
            $transaction->rollBack();
        }

    }

    public function Stock()
    {
        $statementRows = [];
        $itemsRows = [];

        echo PHP_EOL . "Start Stock " . PHP_EOL;


        $records = Yii::$app->db2->createCommand("SELECT * FROM `product_statement` GROUP BY `size_id`")
            ->queryAll();

        foreach ($records as $record){

            $sizeId = $record['size_id'];

            if ($sizeId > 0) {

                $qty = Yii::$app->db2
                    ->createCommand("SELECT SUM(quantity) quantity FROM `product_statement` WHERE `size_id`=".$sizeId)
                    ->queryOne();

                $quantity = $qty['quantity'];

                echo PHP_EOL . "Size# ".$record['size_id'] . " Qty#".$qty['quantity'] . PHP_EOL;

                if ($quantity > 0) {

                    $statementRows[] = [
                        'item_id' => $record['item_id'],
                        'brand_id' => $record['brand_id'],
                        'size_id' => $record['size_id'],
                        'quantity' => $quantity,
                        'type' => 'Stock',
                        'remarks' => 'Migration',
                        'reference_id' => '',
                        'user_id' => $this->userId,
                        'created_at' => DateTimeUtility::getDate('NOW', 'Y-m-d H:i:s'),
                        'updated_at' => DateTimeUtility::getDate('NOW', 'Y-m-d H:i:s'),
                    ];

                    $itemsRows[] = [
                        'product_stock_id' => '',
                        'item_id' => $record['item_id'],
                        'brand_id' => $record['brand_id'],
                        'size_id' => $record['size_id'],
                        'cost_price' => 0,
                        'wholesale_price' => 0,
                        'retail_price' => 0,
                        'previous_quantity' => 0,
                        'new_quantity' => $quantity,
                        'total_quantity' => $quantity,
                        'status'=>ProductStockItems::STATUS_DONE
                    ];

                }
            }

            if (count($statementRows) >= 1000) {
                $this->movement($statementRows, $itemsRows);
                $statementRows = [];
                $itemsRows = [];
            }

        }


        $this->movement($statementRows, $itemsRows);

    }

    public function actionInit()
    {



        $this->CashBook();
        $this->Client();
        $this->ClientPaymentDetails();
        $this->ClientPaymentHistory();
        $this->CustomerAccount();
        $this->CustomerWithdraw();
        $this->DepositBook();
        $this->Expense();

        $this->Sales();
        $this->SalesDetails();
        $this->SalesReturn();
        $this->SalesReturnDetails();
        $this->SerializeData();
        $this->User();

        $this->Withdraw();


        $this->Stock();

        $this->SerializeData();

    }


}