<?php
/**
 * @link http://www.yiiframework.com/
 * @copyright Copyright (c) 2008 Yii Software LLC
 * @license http://www.yiiframework.com/license/
 */

namespace app\commands;

use app\components\DateTimeUtility;
use app\components\ProductUtility;
use app\components\SMS;
use app\components\Utility;
use app\models\BankReconciliation;
use app\models\Brand;
use app\models\BrandNew;
use app\models\Buyer;
use app\models\CashBook;
use app\models\CashHandReceived;
use app\models\ClientPaymentDetails;
use app\models\ClientPaymentHistory;
use app\models\CustomerAccount;
use app\models\CustomerWithdraw;
use app\models\DepositBook;
use app\models\Employee;
use app\models\EmployeeDesignation;
use app\models\Expense;
use app\models\ExpenseType;
use app\models\Item;
use app\models\LcPayment;
use app\models\LcPaymentType;
use app\models\Outlet;
use app\models\PaymentType;
use app\models\ProductItemsPrice;
use app\models\ProductStatement;
use app\models\ProductStatementOutlet;
use app\models\ProductStockItemsOutlet;
use app\models\ProductStockOutlet;
use app\models\ProductUnit;
use app\models\SalaryHistory;
use app\models\Sales;
use app\models\SalesDetails;
use app\models\SalesReturn;
use app\models\SalesReturnDetails;
use app\models\Serialize;
use app\models\Size;
use app\models\User;
use app\models\Bank;
use app\models\Branch;
use app\models\City;
use app\models\Client;
use app\models\Lc;
use app\models\ProductStock;
use app\models\ProductStockItems;
use app\models\Transport;
use app\models\Warehouse;
use app\models\Withdraw;
use Yii;
use yii\console\Controller;
use yii\helpers\Json;

/**
 * This command echoes the first argument that you have entered.
 *
 * This command is provided as an example for you to learn how to create console commands.
 *
 * @author Qiang Xue <qiang.xue@gmail.com>
 * @since 2.0
 */
class OnlineController extends Controller
{
    const REMARKS_COMMENT = 'Migrate By Script';
    const OUTLET_ID = 1;

    public $userId = 1;
    public $lc = 0;
    public $branchId = 5;

    public function init()
    {
        ini_set('max_execution_time', -1);
        $this->createLC();
        parent::init(); // TODO: Change the autogenerated stub
    }

    private function createLC()
    {
        $model = Lc::find()->where(['lc_name' => 'Migration'])->one();
        if ($model) {
            $this->lc = $model->lc_id;
        } else {
            $model = new Lc();
            $model->lc_name = 'Migration';
            $model->lc_number = '1234567890';
            $model->remarks = 'Remarks';
            $model->branch_id = $this->branchId;
            $model->user_id = $this->userId;
            if ($model->save()) {
                $this->lc = $model->lc_id;
            }
        }

    }

    private function movement($statement, $items)
    {
        $transaction = Yii::$app->db->beginTransaction();

        echo PHP_EOL . "Call Movement " . count($statement) . PHP_EOL;

        try {

            $productStock = new ProductStock();
            $productStock->setScenario('migration');
            $productStock->type = ProductStock::TYPE_MIGRATION;
            $productStock->invoice_no = Utility::genInvoice('STMA');
            $productStock->status = ProductStock::STATUS_ACTIVE;
            $productStock->user_id = 1;
            if ($productStock->save()) {

                for ($i = 0; $i < count($statement); $i++) {
                    $statement[$i]['reference_id'] = $productStock->product_stock_id;
                    $items[$i]['product_stock_id'] = $productStock->product_stock_id;
                }

                $totalBulkInsert = Yii::$app->db->createCommand()->batchInsert(ProductStatement::tableName(), [
                    'item_id', 'brand_id', 'size_id', 'quantity', 'type', 'remarks',
                    'reference_id', 'user_id', 'created_at', 'updated_at',
                ], $statement)->execute();

                $totalStatementInsert = Yii::$app->db->createCommand()->batchInsert(ProductStockItems::tableName(), [
                    'product_stock_id','item_id', 'brand_id', 'size_id', 'cost_price',
                    'wholesale_price', 'retail_price', 'previous_quantity',
                    'new_quantity', 'total_quantity', 'status'
                ], $items)->execute();

                if ($totalBulkInsert && $totalStatementInsert) {
                    $transaction->commit();
                } else {
                    $transaction->rollBack();
                }

            } else {
                print_r($productStock->getErrors());
                die();
            }
        } catch (\Exception $e) {
            print_r($e);
            die();
            $transaction->rollBack();
        }

    }

    public function Stock()
    {
        $statementRows = [];
        $itemsRows = [];

        echo PHP_EOL . "Start Stock " . PHP_EOL;


        $records = Yii::$app->db2->createCommand("SELECT * FROM `product_statement` GROUP BY `size_id`")
            ->queryAll();

        foreach ($records as $record){

            $sizeId = $record['size_id'];

            if ($sizeId > 0) {

                $qty = Yii::$app->db2->createCommand("SELECT SUM(quantity) quantity FROM `product_statement` WHERE `size_id`=".$sizeId)
                    ->queryOne();

                $quantity = $qty['quantity'];

                echo PHP_EOL . "Size# ".$record['size_id'] . " Qty#".$qty['quantity'] . PHP_EOL;

                if ($quantity > 0) {

                    $statementRows[] = [
                        'item_id' => $record['item_id'],
                        'brand_id' => $record['brand_id'],
                        'size_id' => $record['size_id'],
                        'quantity' => $quantity,
                        'type' => 'Stock',
                        'remarks' => 'Migration',
                        'reference_id' => '',
                        'user_id' => $this->userId,
                        'created_at' => DateTimeUtility::getDate('NOW', 'Y-m-d H:i:s'),
                        'updated_at' => DateTimeUtility::getDate('NOW', 'Y-m-d H:i:s'),
                    ];

                    $itemsRows[] = [
                        'product_stock_id' => '',
                        'item_id' => $record['item_id'],
                        'brand_id' => $record['brand_id'],
                        'size_id' => $record['size_id'],
                        'cost_price' => 0,
                        'wholesale_price' => 0,
                        'retail_price' => 0,
                        'previous_quantity' => 0,
                        'new_quantity' => $quantity,
                        'total_quantity' => $quantity,
                        'status'=>ProductStockItems::STATUS_DONE
                    ];

                }
            }

            if (count($statementRows) >= 1000) {
                $this->movement($statementRows, $itemsRows);
                $statementRows = [];
                $itemsRows = [];
            }

        }


        $this->movement($statementRows, $itemsRows);

    }

    public function actionInit()
    {

        $this->Stock();

    }


}