<?php
/**
 * @link http://www.yiiframework.com/
 * @copyright Copyright (c) 2008 Yii Software LLC
 * @license http://www.yiiframework.com/license/
 */

namespace app\commands;

use app\components\DateTimeUtility;
use app\components\ProductUtility;
use app\components\Utility;
use app\models\BankReconciliation;
use app\models\Brand;
use app\models\BrandNew;
use app\models\Buyer;
use app\models\CashBook;
use app\models\CashHandReceived;
use app\models\ClientPaymentDetails;
use app\models\ClientPaymentHistory;
use app\models\CustomerAccount;
use app\models\CustomerWithdraw;
use app\models\DepositBook;
use app\models\Employee;
use app\models\EmployeeDesignation;
use app\models\Expense;
use app\models\ExpenseType;
use app\models\Item;
use app\models\LcPayment;
use app\models\LcPaymentType;
use app\models\Outlet;
use app\models\PaymentType;
use app\models\ProductItemsPrice;
use app\models\ProductStatement;
use app\models\ProductStatementOutlet;
use app\models\ProductStockItemsOutlet;
use app\models\ProductStockOutlet;
use app\models\ProductUnit;
use app\models\SalaryHistory;
use app\models\Sales;
use app\models\SalesDetails;
use app\models\SalesReturn;
use app\models\SalesReturnDetails;
use app\models\Serialize;
use app\models\Size;
use app\models\User;
use app\models\Bank;
use app\models\Branch;
use app\models\City;
use app\models\Client;
use app\models\Lc;
use app\models\ProductStock;
use app\models\ProductStockItems;
use app\models\Transport;
use app\models\Warehouse;
use app\models\Withdraw;
use Yii;
use yii\console\Controller;
use yii\helpers\Json;

/**
 * This command echoes the first argument that you have entered.
 *
 * This command is provided as an example for you to learn how to create console commands.
 *
 * @author Qiang Xue <qiang.xue@gmail.com>
 * @since 2.0
 */
class CommonController extends Controller
{
    const REMARKS_COMMENT = 'Migrate By Script';
    const OUTLET_ID = 1;

    public $userId = 1;
    public $paymentTypeCash = 10;
    public $abcClientId = 951;
    public $xyzClientId = 952;

    public function init()
    {
        ini_set('max_execution_time', -1);
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function trancate()
    {
        Yii::$app->db2->createCommand("UPDATE `product_statement` SET type='Sales' WHERE quantity<0 and type=''; UPDATE `product_statement` SET type='Stock' WHERE quantity>0 and type=''")->execute();

        Yii::$app->db->createCommand("
        TRUNCATE `backup`;
        TRUNCATE `bank`;
        TRUNCATE `bank_reconciliation`;
        TRUNCATE `branch`;
        TRUNCATE `brand`;
        TRUNCATE `brand_new`;
        TRUNCATE `buyer`;
        TRUNCATE `cache`;
        TRUNCATE `cash_book`;
        TRUNCATE `cash_hand_received`;
        TRUNCATE `challan`;
        TRUNCATE `challan_condition`;
        TRUNCATE `city`;
        TRUNCATE `client`;
        TRUNCATE `client_payment_details`;
        TRUNCATE `client_payment_history`;
        TRUNCATE `customer_account`;
        TRUNCATE `customer_withdraw`;
        TRUNCATE `deposit_book`;
        TRUNCATE `EmailQueue`;
        TRUNCATE `employee`;
        TRUNCATE `employee_designation`;
        TRUNCATE `expense`;
        TRUNCATE `expense_type`;
        TRUNCATE `item`;
        TRUNCATE `lc`;
        TRUNCATE `lc_payment`;
        TRUNCATE `lc_payment_type`;
        TRUNCATE `market_book`;
        TRUNCATE `market_book_history`;
        TRUNCATE `migration`;
        TRUNCATE `payment_type`;
        TRUNCATE `product_items_price`;
        TRUNCATE `product_statement`;
        TRUNCATE `product_statement_outlet`;
        TRUNCATE `product_stock`;
        TRUNCATE `product_stock_items`;
        TRUNCATE `product_stock_items_draft`;
        TRUNCATE `product_stock_items_outlet`;
        TRUNCATE `product_stock_outlet`;
        TRUNCATE `product_unit`;
        TRUNCATE `reconciliation_type`;
        TRUNCATE `return_draft`;
        TRUNCATE `salary_history`;
        TRUNCATE `sales`;
        TRUNCATE `sales_details`;
        TRUNCATE `sales_draft`;
        TRUNCATE `sales_return`;
        TRUNCATE `sales_return_details`;
        TRUNCATE `serialize`;
        TRUNCATE `size`;
        TRUNCATE `sms_gateway`;
        TRUNCATE `template`;
        TRUNCATE `transport`;
        TRUNCATE `user`;
        TRUNCATE `user_outlet`;
        TRUNCATE `warehouse`;
        TRUNCATE `warehouse_payment`;
        TRUNCATE `withdraw`;
            
            ")->execute();
    }

    public function BankBranch()
    {
        echo PHP_EOL . "Start Bank & Brand Importing" . PHP_EOL;

        $rows = [];
        echo PHP_EOL . "Start Bank Importing" . PHP_EOL;
        $brand = Yii::$app->db2->createCommand("SELECT * FROM bank")->queryAll();
        foreach ($brand as $data) {
            $rows[] = [
                'bank_id' => $data['bank_id'],
                'bank_name' => trim($data['bank_name']),
            ];
        }

        echo "Start Inserting Branch to current table" . PHP_EOL;
        Yii::$app->db->createCommand()->batchInsert(Bank::tableName(), ['bank_id', 'bank_name'], $rows)->execute();
        echo "successfully inserted Bank" . PHP_EOL;

        $rows = [];
        echo PHP_EOL . "Start Branch Importing" . PHP_EOL;
        $brand = Yii::$app->db2->createCommand("SELECT * FROM branch")->queryAll();
        foreach ($brand as $data) {
            $rows[] = [
                'branch_id' => $data['branch_id'],
                'bank_id' => $data['bank_id'],
                'branch_name' => trim($data['branch_name']),
            ];
        }

        echo "Start Inserting Branch to current table" . PHP_EOL;
        Yii::$app->db->createCommand()->batchInsert(Branch::tableName(), ['branch_id', 'bank_id', 'branch_name'], $rows)->execute();
        echo "successfully inserted Branch" . PHP_EOL;

    }

    public function BankReconciliation()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start Bank Reconciliation Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `id` ) AS total FROM `bank_reconciliation`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $bankRows = [];

            echo PHP_EOL . "Query all Bank Reconciliation data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $banks = Yii::$app->db2->createCommand("SELECT * FROM `bank_reconciliation` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($banks as $bank) {
                $bankRows[] = [
                    'id' => $bank['id'],
                    'user_id' => $bank['user_id'],
                    'outletId' => self::OUTLET_ID,
                    'payment_type' => $bank['payment_type'],
                    'reconciliation_type' => $bank['reconciliation_type'],
                    'bank_id' => $bank['bank_id'],
                    'branch_id' => $bank['branch_id'],
                    'customer_id' => $bank['customer_id'],
                    'invoice_id' => $bank['invoice_id'],
                    'amount' => $bank['amount'],
                    'remarks' => $bank['remarks'],
                    'created_at' => $bank['created_at'],
                    'updated_at' => $bank['updated_at'],
                    'updated_by' => $bank['updated_by'],
                    'status' => $bank['status']
                ];

            }

            $bankReconciliation = new BankReconciliation();
            echo PHP_EOL . "Start Inserting Bank Reconciliation data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(BankReconciliation::tableName(), $bankReconciliation->attributes(), $bankRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function Brand()
    {
        $rows = [];

        echo PHP_EOL . "Start Brands Importing" . PHP_EOL;
        $brand = Yii::$app->db2->createCommand("SELECT * FROM brand")->queryAll();
        foreach ($brand as $data) {
            $rows[] = [
                'id' => $data['id'],
                'brand_id' => $data['brand_id'],
                'item_id' => $data['item_id'],
                'brand_name' => trim($data['brand_name']),
                'brand_status' => $data['brand_status'],
            ];
        }

        echo "Start Inserting brands to current table" . PHP_EOL;
        Yii::$app->db->createCommand()->batchInsert(Brand::tableName(), [
            'id', 'brand_id', 'item_id', 'brand_name', 'brand_status'
        ], $rows)->execute();
        echo "successfully inserted brands" . PHP_EOL;

    }

    public function BrandNew()
    {
        $rows = [];

        echo PHP_EOL . "Start Brands Importing" . PHP_EOL;
        $brand = Yii::$app->db2->createCommand("SELECT * FROM brand_new")->queryAll();
        foreach ($brand as $data) {
            $rows[] = [
                'id' => $data['id'],
                'name' => $data['name'],
                'status' => $data['status'],
                'extra' => trim($data['extra'])
            ];
        }

        echo "Start Inserting brands to current table" . PHP_EOL;
        Yii::$app->db->createCommand()->batchInsert(BrandNew::tableName(), ['id', 'name', 'status', 'extra'], $rows)->execute();
        echo "successfully inserted brands" . PHP_EOL;

    }

    public function Buyer()
    {
        $rows = [];
        echo PHP_EOL . "Start buyer Importing" . PHP_EOL;
        $brand = Yii::$app->db2->createCommand("SELECT * FROM buyer")->queryAll();
        foreach ($brand as $data) {
            $rows[] = [
                'id' => $data['id'],
                'name' => $data['name'],
                'city' => $data['city'],
                'address1' => trim($data['address1']),
                'address2' => $data['address2'],
                'contact_number' => $data['contact_number'],
                'contact_person' => $data['contact_person'],
                'contact_person_number' => $data['contact_person_number'],
            ];
        }

        echo "Start Inserting buyer to current table" . PHP_EOL;
        Yii::$app->db->createCommand()->batchInsert(Buyer::tableName(), [
            'id', 'name', 'city', 'address1', 'address2', 'contact_number', 'contact_person', 'contact_person_number'
        ], $rows)->execute();
        echo "successfully inserted buyer" . PHP_EOL;

    }

    public function CashBook()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start Cash Book Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `id` ) AS total FROM `cash_book`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $cashBookRows = [];

            echo PHP_EOL . "Query all Cash Book data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $cashBooks = Yii::$app->db2->createCommand("SELECT * FROM `cash_book` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($cashBooks as $cashBook) {
                $cashBookRows[] = [
                    'id' => $cashBook['id'],
                    'remarks' => $cashBook['remarks'],
                    'outletId' => self::OUTLET_ID,
                    'reference_id' => $cashBook['reference_id'],
                    'ref_user_id' => $cashBook['ref_user_id'],
                    'source' => $cashBook['source'],
                    'cash_in' => $cashBook['cash_in'],
                    'cash_out' => $cashBook['cash_out'],
                    'created_at' => $cashBook['created_at'],
                    'updated_at' => $cashBook['updated_at'],
                ];

            }

            $cashBookNewData = new CashBook();
            echo PHP_EOL . "Start Inserting Cash Book data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(CashBook::tableName(), $cashBookNewData->attributes(), $cashBookRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function CashHandReceive()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start Bank Reconciliation Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `id` ) AS total FROM `cash_hand_received`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $cashHandRows = [];

            echo PHP_EOL . "Query all Bank Reconciliation data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $cashBooks = Yii::$app->db2->createCommand("SELECT * FROM `cash_hand_received` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($cashBooks as $cashBook) {
                $cashHandRows[] = [
                    'id' => $cashBook['id'],
                    'user_id' => $cashBook['user_id'],
                    'outletId' => self::OUTLET_ID,
                    'received_amount' => $cashBook['received_amount'],
                    'remarks' => $cashBook['remarks'],
                    'status' => $cashBook['status'],
                    'created_at' => $cashBook['created_at'],
                    'updated_at' => $cashBook['updated_at'],
                ];

            }

            $cashHandReceived = new CashHandReceived();
            echo PHP_EOL . "Start Inserting Bank Reconciliation data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(CashHandReceived::tableName(), $cashHandReceived->attributes(), $cashHandRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function City()
    {
        $rows = [];
        echo PHP_EOL . "Start City Importing" . PHP_EOL;
        $brand = Yii::$app->db2->createCommand("SELECT * FROM city")->queryAll();
        foreach ($brand as $data) {
            $rows[] = ['city_id' => $data['city_id'], 'city_name' => $data['city_name'],];
        }
        echo "Start Inserting City to current table" . PHP_EOL;
        Yii::$app->db->createCommand()->batchInsert(City::tableName(), ['city_id', 'city_name'], $rows)->execute();
        echo "successfully inserted City" . PHP_EOL;
    }

    public function Client()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;
        echo PHP_EOL . "Start Client Importing" . PHP_EOL;
        $record = Yii::$app->db2->createCommand("SELECT count( `client_id` ) AS total FROM `client`")->queryAll();
        $totalRecords = $record[0]['total'];


        while ($totalRecords > $offset) {

            $rows = [];

            echo PHP_EOL . "Query all Client data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $clients = Yii::$app->db2->createCommand("SELECT * FROM `client` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($clients as $client) {
                $rows[] = [
                    'client_id' => $client['client_id'],
                    'outletId' => self::OUTLET_ID,
                    'client_name' => $client['client_name'],
                    'client_city' => $client['client_city'],
                    'client_address1' => $client['client_address1'],
                    'client_address2' => $client['client_address2'],
                    'client_contact_number' => $client['client_contact_number'],
                    'client_contact_person' => $client['client_contact_person'],
                    'client_contact_person_number' => $client['client_contact_person_number'],
                    'email' => $client['email'],
                    'client_type' => $client['client_type'],
                    'client_balance' => $client['client_balance'],
                ];

            }

            echo PHP_EOL . "Start Inserting Client data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(Client::tableName(), [
                'client_id', 'outletId', 'client_name', 'client_city', 'client_address1',
                'client_address2', 'client_contact_number', 'client_contact_person', 'client_contact_person_number',
                'email', 'client_type', 'client_balance'], $rows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function ClientPaymentDetails()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start Client Payment Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `client_payment_details_id` ) AS total FROM `client_payment_details`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $clientPaymentRows = [];

            echo PHP_EOL . "Query all Client Payment data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $clientPayments = Yii::$app->db2->createCommand("SELECT * FROM `client_payment_details` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($clientPayments as $clientPayment) {
                $clientPaymentRows[] = [
                    'client_payment_details_id' => $clientPayment['client_payment_details_id'],
                    'sales_id' => $clientPayment['sales_id'],
                    'client_id' => $clientPayment['client_id'],
                    'payment_history_id' => $clientPayment['payment_history_id'],
                    'paid_amount' => $clientPayment['paid_amount'],
                    'payment_type' => $clientPayment['payment_type'],
                    'created_at' => $clientPayment['created_at'],
                    'updated_at' => $clientPayment['updated_at'],
                ];

            }

            $clientPaymentNewData = new ClientPaymentDetails();
            echo PHP_EOL . "Start Inserting Client Payment data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(ClientPaymentDetails::tableName(), $clientPaymentNewData->attributes(), $clientPaymentRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function ClientPaymentHistory()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start Client Payment Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `client_payment_history_id` ) AS total FROM `client_payment_history`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $clientPaymentRows = [];

            echo PHP_EOL . "Query all Client Payment History data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $clientPayments = Yii::$app->db2->createCommand("SELECT * FROM `client_payment_history` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($clientPayments as $clientPayment) {
                $clientPaymentRows[] = [
                    'client_payment_history_id' => $clientPayment['client_payment_history_id'],
                    'client_id' => $clientPayment['client_id'],
                    'outletId' => self::OUTLET_ID,
                    'user_id' => $clientPayment['user_id'],
                    'updated_by' => $clientPayment['updated_by'],
                    'sales_id' => $clientPayment['sales_id'],
                    'received_amount' => $clientPayment['received_amount'],
                    'remaining_amount' => $clientPayment['remaining_amount'],
                    'remarks' => $clientPayment['remarks'],
                    'received_type' => $clientPayment['received_type'],
                    'extra' => $clientPayment['extra'],
                    'received_at' => $clientPayment['received_at'],
                    'updated_at' => $clientPayment['updated_at'],
                    'payment_type_id' => $clientPayment['payment_type_id'],
                    'status' => $clientPayment['status'],
                ];

            }

            $clientPaymentNewData = new ClientPaymentHistory();
            echo PHP_EOL . "Start Inserting Client Payment History data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(ClientPaymentHistory::tableName(), $clientPaymentNewData->attributes(), $clientPaymentRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function CustomerAccount()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start Customer Account Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `id` ) AS total FROM `customer_account`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $rows = [];

            echo PHP_EOL . "Query all Customer Account data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $customerAccounts = Yii::$app->db2->createCommand("SELECT * FROM `customer_account` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($customerAccounts as $customerAccount) {
                $rows[] = [
                    'id' => $customerAccount['id'],
                    'sales_id' => $customerAccount['sales_id'],
                    'memo_id' => $customerAccount['memo_id'],
                    'client_id' => $customerAccount['client_id'],
                    'type' => $customerAccount['type'],
                    'payment_type' => $customerAccount['payment_type'],
                    'payment_history_id' => $customerAccount['payment_history_id'],
                    'account' => $customerAccount['account'],
                    'debit' => $customerAccount['debit'],
                    'credit' => $customerAccount['credit'],
                    'balance' => $customerAccount['balance'],
                    'date' => $customerAccount['date'],
                ];

            }

            echo PHP_EOL . "Start Inserting Customer Account data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(CustomerAccount::tableName(), [
                'id', 'sales_id', 'memo_id', 'client_id', 'type', 'payment_type',
                'payment_history_id', 'account', 'debit', 'credit', 'balance', 'date'
            ], $rows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function CustomerWithdraw()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start Customer Withdraw Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `id` ) AS total FROM `customer_withdraw`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $customerAccountsRows = [];

            echo PHP_EOL . "Query all Customer Withdraw data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $customerAccounts = Yii::$app->db2->createCommand("SELECT * FROM `customer_withdraw` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($customerAccounts as $customerAccount) {
                $customerAccountsRows[] = [
                    'id' => $customerAccount['id'],
                    'payment_history_id' => $customerAccount['payment_history_id'],
                    'outletId' => self::OUTLET_ID,
                    'client_id' => $customerAccount['client_id'],
                    'amount' => $customerAccount['amount'],
                    'remarks' => $customerAccount['remarks'],
                    'created_by' => $customerAccount['created_by'],
                    'updated_by' => $customerAccount['updated_by'],
                    'status' => $customerAccount['status'],
                    'type' => $customerAccount['type'],
                    'extra' => $customerAccount['extra'],
                    'created_at' => $customerAccount['created_at'],
                    'updated_at' => $customerAccount['updated_at'],
                ];

            }

            $customerAccountNewData = new CustomerWithdraw();
            echo PHP_EOL . "Start Inserting Customer Withdraw data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(CustomerWithdraw::tableName(), $customerAccountNewData->attributes(), $customerAccountsRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function DepositBook()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start Deposit Book Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `id` ) AS total FROM `deposit_book`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $depositBookRows = [];

            echo PHP_EOL . "Query all Deposit Book data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $models = Yii::$app->db2->createCommand("SELECT * FROM `deposit_book` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($models as $model) {
                $depositBookRows[] = [
                    'id' => $model['id'],
                    'outletId' => self::OUTLET_ID,
                    'bank_id' => $model['bank_id'],
                    'branch_id' => $model['branch_id'],
                    'payment_type_id' => $model['payment_type_id'],
                    'ref_user_id' => $model['ref_user_id'],
                    'deposit_in' => $model['deposit_in'],
                    'deposit_out' => $model['deposit_out'],
                    'reference_id' => $model['reference_id'],
                    'source' => $model['source'],
                    'remarks' => $model['remarks'],
                    'created_at' => $model['created_at'],
                    'updated_at' => $model['updated_at'],
                ];

            }

            $depositBooksNewData = new DepositBook();
            echo PHP_EOL . "Start Inserting Deposit Book data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(DepositBook::tableName(), $depositBooksNewData->attributes(), $depositBookRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function Employee()
    {
        $offset = 0;
        $limit = 1000;
        $totalRecords = 0;
        echo PHP_EOL . "Start Deposit Book Importing" . PHP_EOL;
        $record = Yii::$app->db2->createCommand("SELECT count( `id` ) AS total FROM `employee`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {
            $rows = [];
            echo PHP_EOL . "Query all Deposit Book data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $models = Yii::$app->db2->createCommand("SELECT * FROM `employee` LIMIT {$offset}, {$limit}")->queryAll();
            foreach ($models as $model) {
                $rows[] = [
                    'id' => $model['id'],
                    'designation' => $model['designation'],
                    'full_name' => $model['full_name'],
                    'dob' => $model['dob'],
                    'picture' => $model['picture'],
                    'contact_number' => $model['contact_number'],
                    'email' => $model['email'],
                    'present_address' => $model['present_address'],
                    'permanent_address' => $model['permanent_address'],
                    'salary' => $model['salary'],
                    'joining_date' => $model['joining_date'],
                    'remarks' => $model['remarks'],
                    'status' => $model['status'],
                    'created_at' => $model['created_at'],
                    'updated_at' => $model['updated_at'],
                ];

            }

            echo PHP_EOL . "Start Inserting Deposit Book data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(Employee::tableName(), [
                'id', 'designation', 'full_name', 'dob', 'picture', 'contact_number',
                'email', 'present_address', 'permanent_address', 'salary', 'joining_date',
                'remarks', 'status', 'created_at', 'updated_at',
            ], $rows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function EmployeeDesignation()
    {
        $offset = 0;
        $limit = 1000;
        $totalRecords = 0;
        echo PHP_EOL . "Start EmployeeDegination Importing" . PHP_EOL;
        $record = Yii::$app->db2->createCommand("SELECT count( `id` ) AS total FROM `employee_designation`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $rows = [];
            echo PHP_EOL . "Query all EmployeeDegination data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $sizes = Yii::$app->db2->createCommand("SELECT * FROM `employee_designation` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($sizes as $size) {
                $rows[] = [
                    'id' => $size['id'],
                    'name' => $size['name'],
                    'status' => $size['status'],
                ];
            }

            $sizeNewData = new Size();
            echo PHP_EOL . "Start Inserting EmployeeDegination data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(EmployeeDesignation::tableName(), ['id', 'name', 'status'], $rows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function ExpenseType()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start Expense Type Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `expense_type_id` ) AS total FROM `expense_type`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $expenseRows = [];

            echo PHP_EOL . "Query all Expense Type data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $expenses = Yii::$app->db2->createCommand("SELECT * FROM `expense_type` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($expenses as $expense) {
                $expenseRows[] = [
                    'expense_type_id' => $expense['expense_type_id'],
                    'expense_type_name' => $expense['expense_type_name'],
                    'expense_type_mode' => $expense['expense_type_mode'],
                    'expense_type_status' => $expense['expense_type_status']
                ];

            }

            $expenseType = new ExpenseType();
            echo PHP_EOL . "Start Inserting Expense Type data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(ExpenseType::tableName(), $expenseType->attributes(), $expenseRows)->execute();

            $offset = $offset + $limit;
        }

        //$this->ExpenseTypeBank();

    }

    public function Expense()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start Expense Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `expense_id` ) AS total FROM `expense`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $expenseRows = [];

            echo PHP_EOL . "Query all Expense data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $expenses = Yii::$app->db2->createCommand("SELECT * FROM `expense` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($expenses as $expense) {
                $expenseRows[] = [
                    'expense_id' => $expense['expense_id'],
                    'expense_type_id' => $expense['expense_type_id'],
                    'outletId' => self::OUTLET_ID,
                    'type' => $expense['type'],
                    'ref_id' => $expense['ref_id'],
                    'user_id' => $expense['user_id'],
                    'updated_by' => $expense['updated_by'],
                    'expense_amount' => $expense['expense_amount'],
                    'expense_remarks' => $expense['expense_remarks'],
                    'status' => $expense['status'],
                    'extra' => $expense['extra'],
                    'source' => $expense['source'],
                    'created_at' => $expense['created_at'],
                    'updated_at' => $expense['updated_at'],
                ];

            }

            echo PHP_EOL . "Start Inserting Expense data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(Expense::tableName(), [
                'expense_id', 'expense_type_id', 'outletId', 'type', 'ref_id', 'user_id', 'updated_by',
                'expense_amount', 'expense_remarks', 'status', 'extra', 'source', 'created_at', 'updated_at',
            ], $expenseRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function Item()
    {
        echo PHP_EOL . "Start Items Importing" . PHP_EOL;
        echo "Query all items data from old table" . PHP_EOL;
        $data = Yii::$app->db2->createCommand("SELECT * FROM `item`")->queryAll();
        $rows = [];
        foreach ($data as $item) {
            $rows[] = [$item['item_id'], trim($item['item_name']), 'active',];
        }
        echo "Start Inserting items to current table" . PHP_EOL;
        Yii::$app->db->createCommand()->batchInsert(Item::tableName(), ['item_id', 'item_name', 'product_status'], $rows)->execute();
        echo "successfully inserted items" . PHP_EOL;

    }

    public function LC()
    {
        echo PHP_EOL . "Start LC Importing" . PHP_EOL;
        echo "Query all LC data from old table" . PHP_EOL;
        $data = Yii::$app->db2->createCommand("SELECT * FROM `lc`")->queryAll();
        $rows = [];
        foreach ($data as $item) {
            $rows[] = [
                'lc_id' => $item['lc_id'],
                'lc_name' => trim($item['lc_name']),
                'lc_number' => $item['lc_number'],
                'remarks' => $item['remarks'],
                'branch_id' => $item['branch_id'],
                'user_id' => $item['user_id'],
                'created_at' => $item['created_at'],
                'updated_at' => $item['updated_at']
            ];
        }
        echo "Start Inserting LC to current table" . PHP_EOL;
        Yii::$app->db->createCommand()->batchInsert(Lc::tableName(), [
            'lc_id', 'lc_name', 'lc_number', 'remarks', 'branch_id', 'user_id', 'created_at', 'updated_at'
        ], $rows)->execute();
        echo "successfully inserted LC" . PHP_EOL;

    }

    public function LCPayment()
    {
        echo PHP_EOL . "Start lc_payment Importing" . PHP_EOL;
        echo "Query all LC data from old table" . PHP_EOL;
        $models = Yii::$app->db2->createCommand("SELECT * FROM `lc_payment`")->queryAll();
        $rows = [];
        foreach ($models as $model) {
            $rows[] = [
                'lc_payment_id' => $model['lc_payment_id'],
                'lc_id' => trim($model['lc_id']),
                'lc_payment_type' => $model['lc_payment_type'],
                'user_id' => $model['user_id'],
                'updated_by' => $model['updated_by'],
                'amount' => $model['amount'],
                'payment_type' => $model['payment_type'],
                'remarks' => $model['remarks'],
                'extra' => $model['extra'],
                'created_at' => $model['created_at'],
                'updated_at' => $model['updated_at'],
            ];
        }
        echo "Start Inserting lc_payment to current table" . PHP_EOL;
        Yii::$app->db->createCommand()->batchInsert(LcPayment::tableName(), [
            'lc_payment_id', 'lc_id', 'lc_payment_type', 'user_id', 'updated_by', 'amount',
            'payment_type', 'remarks', 'status', 'extra', 'created_at', 'updated_at'
        ], $rows)->execute();
        echo "successfully inserted lc_payment" . PHP_EOL;

    }

    public function LCPaymentType()
    {
        echo PHP_EOL . "Start LcPaymentType Importing" . PHP_EOL;
        echo "Query all LcPaymentType data from old table" . PHP_EOL;
        $models = Yii::$app->db2->createCommand("SELECT * FROM `lc_payment_type`")->queryAll();
        $rows = [];
        foreach ($models as $model) {
            $rows[] = [
                'lc_payment_type_id' => $model['lc_payment_type_id'],
                'lc_payment_type_name' => trim($model['lc_payment_type_name']),
                'lc_payment_type_status ' => trim($model[' lc_payment_type_status '])
            ];
        }
        echo "Start Inserting LcPaymentType to current table" . PHP_EOL;
        Yii::$app->db->createCommand()->batchInsert(LcPaymentType::tableName(), [
            'lc_payment_type_id', 'lc_payment_type_name', 'lc_payment_type_status'

        ], $rows)->execute();
        echo "successfully inserted LcPaymentType" . PHP_EOL;

    }

    // Market Book Relation Table not Required
    //Module Not Required

    public function PaymentType()
    {
        echo PHP_EOL . "Start PaymentType Importing" . PHP_EOL;
        echo "Query all LcPaymentType data from old table" . PHP_EOL;
        $models = Yii::$app->db2->createCommand("SELECT * FROM `payment_type`")->queryAll();
        $rows = [];
        foreach ($models as $model) {
            $rows[] = [
                'payment_type_id' => $model['payment_type_id'],
                'payment_type_name' => trim($model['payment_type_name']),
                'type' => $model['type'],
                'status' => $model['status'],
            ];
        }
        echo "Start Inserting PaymentType to current table" . PHP_EOL;
        Yii::$app->db->createCommand()->batchInsert(PaymentType::tableName(), [
            'payment_type_id', 'payment_type_name', 'type', 'status'

        ], $rows)->execute();
        echo "successfully inserted PaymentType" . PHP_EOL;

    }

    public function ProductItemsPrice()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start Product Items Price Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `product_stock_items_id` ) AS total FROM `product_items_price`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $productItemsPriceNewDataRows = [];

            echo PHP_EOL . "Query all Product Items price data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $productItemsPrices = Yii::$app->db2->createCommand("SELECT * FROM `product_items_price` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($productItemsPrices as $productItemsPrice) {
                $productItemsPriceNewDataRows[] = [
                    'product_stock_items_id' => $productItemsPrice['product_stock_items_id'],
                    'item_id' => $productItemsPrice['item_id'],
                    'brand_id' => $productItemsPrice['brand_id'],
                    'size_id' => $productItemsPrice['size_id'],
                    'cost_price' => $productItemsPrice['cost_price'],
                    'wholesale_price' => $productItemsPrice['wholesale_price'],
                    'retail_price' => $productItemsPrice['retail_price'],
                    'quantity' => $productItemsPrice['quantity'],
                    'total_quantity' => $productItemsPrice['total_quantity'],
                    'alert_quantity' => $productItemsPrice['alert_quantity'],
                ];

            }

            $productItemsPriceNewData = new ProductItemsPrice();
            echo PHP_EOL . "Start Inserting Product Items Price data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(ProductItemsPrice::tableName(), $productItemsPriceNewData->attributes(), $productItemsPriceNewDataRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function ProductStatement()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start product_statement Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `product_statement_id` ) AS total FROM `product_statement`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $ProductStatementNewDataRows = [];

            echo PHP_EOL . "Query all product_statement data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $productStatements = Yii::$app->db2->createCommand("SELECT * FROM `product_statement` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($productStatements as $productStatement) {
                $ProductStatementNewDataRows[] = [
                    'product_statement_id' => $productStatement['product_statement_id'],
                    'item_id' => $productStatement['item_id'],
                    'brand_id' => $productStatement['brand_id'],
                    'size_id' => $productStatement['size_id'],
                    'quantity' => $productStatement['quantity'],
                    'type' => $productStatement['type'],
                    'remarks' => $productStatement['remarks'],
                    'reference_id' => $productStatement['reference_id'],
                    'user_id' => $productStatement['user_id'],
                    'created_at' => $productStatement['created_at'],
                    'updated_at' => $productStatement['updated_at'],
                ];

            }

            $productStatementNewData = new ProductStatement();
            echo PHP_EOL . "Start Inserting product_statement data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(ProductStatement::tableName(), $productStatementNewData->attributes(), $ProductStatementNewDataRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function ProductStock()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start product_stock Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `product_stock_id` ) AS total FROM `product_stock`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $ProductStockNewDataRows = [];

            echo PHP_EOL . "Query all product_stock data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $productStocks = Yii::$app->db2->createCommand("SELECT * FROM `product_stock` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($productStocks as $productStock) {

                $row =  [
                    'product_stock_id' => $productStock['product_stock_id'],
                    'warehouse_id' => $productStock['warehouse_id'],
                    'lc_id' => $productStock['lc_id'],
                    'user_id' => $productStock['user_id'],
                    'buyer_id' => $productStock['buyer_id'],
                    'invoice_no' => Utility::genInvoice('STO-'),
                    'type' => $productStock['type'],
                    'remarks' => $productStock['remarks'],
                    'params' => $productStock['params'],
                    'created_at' => $productStock['created_at'],
                    'updated_at' => $productStock['updated_at'],
                    //'status' => $productStock['status'],
                    'status' => 'inactive',
                ];


                $ProductStockNewDataRows[] = $row;

            }

            $productStockNewData = new ProductStock();
            echo PHP_EOL . "Start Inserting product_stock data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(ProductStock::tableName(), $productStockNewData->attributes(), $ProductStockNewDataRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function ProductStockItems()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start product_stock_items Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `product_stock_items_id` ) AS total FROM `product_stock_items`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $ProductStockItemsNewDataRows = [];

            echo PHP_EOL . "Query all product_stock data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $productStocks = Yii::$app->db2->createCommand("SELECT * FROM `product_stock_items` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($productStocks as $productStock) {
                $ProductStockItemsNewDataRows[] = [
                    'product_stock_items_id' => $productStock['product_stock_items_id'],
                    'product_stock_id' => $productStock['product_stock_id'],
                    'item_id' => $productStock['item_id'],
                    'brand_id' => $productStock['brand_id'],
                    'size_id' => $productStock['size_id'],
                    'cost_price' => $productStock['cost_price'],
                    'wholesale_price' => $productStock['wholesale_price'],
                    'retail_price' => $productStock['retail_price'],
                    'previous_quantity' => $productStock['previous_quantity'],
                    'new_quantity' => $productStock['new_quantity'],
                    'total_quantity' => $productStock['total_quantity'],
                    'status' => $productStock['status'],
                ];

            }

            $productStockNewData = new ProductStockItems();
            echo PHP_EOL . "Start Inserting product_stock data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(ProductStockItems::tableName(), $productStockNewData->attributes(), $ProductStockItemsNewDataRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function ProductUnit()
    {

        echo PHP_EOL . "Start Product Unit Importing" . PHP_EOL;
        $rows = [];
        $models = Yii::$app->db2->createCommand("SELECT * FROM `product_unit`")->queryAll();
        foreach ($models as $model) {
            $rows[] = [
                'id' => $model['id'],
                'name' => $model['name'],
                'status' => $model['status'],
            ];
        }

        echo PHP_EOL . "Start Inserting product_unit Book data to current table" . PHP_EOL;
        Yii::$app->db->createCommand()->batchInsert(ProductUnit::tableName(), ['id', 'name', 'status'], $rows)->execute();
    }

    public function SalaryHistory()
    {

        echo PHP_EOL . "Start SalaryHistory Book Importing" . PHP_EOL;
        $rows = [];
        $models = Yii::$app->db2->createCommand("SELECT * FROM `salary_history`")->queryAll();
        foreach ($models as $model) {
            $rows[] = [
                'id' => $model['id'],
                'employee_id' => $model['employee_id'],
                'withdraw_amount' => $model['withdraw_amount'],
                'remaining_salary' => $model['remaining_salary'],
                'payment_type' => $model['payment_type'],
                'month' => $model['month'],
                'year' => $model['year'],
                'remarks' => $model['remarks'],
                'user_id' => $model['user_id'],
                'extra' => $model['extra'],
                'status' => $model['status'],
                'updated_by' => $model['updated_by'],
                'created_at' => $model['created_at'],
                'updated_at' => $model['updated_at'],
            ];
        }


        echo PHP_EOL . "Start Inserting SalaryHistory Book data to current table" . PHP_EOL;
        Yii::$app->db->createCommand()->batchInsert(SalaryHistory::tableName(), [
            'id', 'employee_id', 'withdraw_amount', 'remaining_salary', 'payment_type', 'month', 'year',
            'remarks', 'user_id', 'extra', 'status', 'updated_by', 'created_at', 'updated_at'
        ], $rows)->execute();
    }

    public function Sales()
    {
        $offset = 0;
        $limit = 3000;

        $totalRecords = 0;

        echo PHP_EOL . "Start Sales Invoice Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `sales_id` ) AS total FROM `sales`")->queryAll();
        $totalRecords = $record[0]['total'];
        while ($totalRecords > $offset) {

            $salesRows = [];

            echo PHP_EOL . "Query all Sales data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $sales = Yii::$app->db2->createCommand("SELECT * FROM `sales` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($sales as $sale) {
                $salesRows[] = [
                    'sales_id' => $sale['sales_id'],
                    'outletId' => self::OUTLET_ID,
                    'memo_id' => $sale['memo_id'],
                    'client_id' => $sale['client_id'],
                    'client_name' => $sale['client_name'],
                    'client_mobile' => $sale['client_mobile'],
                    'client_type' => $sale['client_type'],
                    'user_id' => $sale['user_id'],
                    'updated_by' => $sale['updated_by'],
                    'contact_number' => $sale['contact_number'],
                    'received_amount' => $sale['received_amount'],
                    'reconciliation_amount' => $sale['reconciliation_amount'],
                    'sales_return_amount' => $sale['sales_return_amount'],
                    'paid_amount' => $sale['paid_amount'],
                    'due_amount' => $sale['due_amount'],
                    'discount_amount' => $sale['discount_amount'],
                    'total_amount' => $sale['total_amount'],
                    'remarks' => $sale['remarks'],
                    'type' => $sale['type'],
                    'payment_type' => $sale['payment_type'],
                    'bank' => $sale['bank'],
                    'branch' => $sale['branch'],
                    'transport_id' => $sale['transport_id'],
                    'transport_name' => $sale['transport_name'],
                    'tracking_number' => $sale['tracking_number'],
                    'status' => $sale['status'],
                    'created_at' => $sale['created_at'],
                    'updated_at' => $sale['updated_at'],
                ];

            }

            $salesNewData = new Sales();
            echo PHP_EOL . "Start Inserting Sales data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(Sales::tableName(), $salesNewData->attributes(), $salesRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function SalesDetails()
    {
        $offset = 0;
        $limit = 3000;

        $totalRecords = 0;

        echo PHP_EOL . "Start Sales Invoice Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `sales_details_id` ) AS total FROM `sales_details`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $salesRows = [];

            echo PHP_EOL . "Query all Sales data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $sales = Yii::$app->db2->createCommand("SELECT * FROM `sales_details` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($sales as $sale) {
                $salesRows[] = [
                    'sales_details_id' => $sale['sales_details_id'],
                    'outletId' => self::OUTLET_ID,
                    'sales_id' => $sale['sales_id'],
                    'item_id' => $sale['item_id'],
                    'brand_id' => $sale['brand_id'],
                    'size_id' => $sale['size_id'],
                    'unit' => $sale['unit'],
                    'cost_amount' => $sale['cost_amount'],
                    'sales_amount' => $sale['sales_amount'],
                    'total_amount' => $sale['total_amount'],
                    'quantity' => $sale['quantity'],
                    'challan_unit' => $sale['challan_unit'],
                    'challan_quantity' => $sale['challan_quantity'],
                    'status' => $sale['status'],
                ];

            }

            $salesNewData = new SalesDetails();
            echo PHP_EOL . "Start Inserting Sales data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(SalesDetails::tableName(), $salesNewData->attributes(), $salesRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function SalesReturn()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start sales_return Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `sales_return_id` ) AS total FROM `sales_return`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $salesReturnNewDataRows = [];

            echo PHP_EOL . "Query all sales_return data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $sales_returns = Yii::$app->db2->createCommand("SELECT * FROM `sales_return` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($sales_returns as $sales_return) {
                $salesReturnNewDataRows[] = [
                    'sales_return_id' => $sales_return['sales_return_id'],
                    'outletId' => self::OUTLET_ID,
                    'user_id' => $sales_return['user_id'],
                    'sales_id' => $sales_return['sales_id'],
                    'client_id' => $sales_return['client_id'],
                    'memo_id' => $sales_return['memo_id'],
                    'client_name' => $sales_return['client_name'],
                    'client_mobile' => $sales_return['client_mobile'],
                    'refund_amount' => $sales_return['refund_amount'],
                    'cut_off_amount' => $sales_return['cut_off_amount'],
                    'total_amount' => $sales_return['total_amount'],
                    'remarks' => $sales_return['remarks'],
                    'type' => $sales_return['type'],
                    'payment_history_id' => $sales_return['payment_history_id'],
                    'payment_status' => $sales_return['payment_status'],
                    'status' => $sales_return['status'],
                    'updated_by' => $sales_return['updated_by'],
                    'created_at' => $sales_return['created_at'],
                    'updated_at' => $sales_return['updated_at'],
                ];

            }

            $sales_returnNewData = new SalesReturn();
            echo PHP_EOL . "Start Inserting sales_return data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(SalesReturn::tableName(), $sales_returnNewData->attributes(), $salesReturnNewDataRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function SalesReturnDetails()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start sales_return_details Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `sales_return_details_id` ) AS total FROM `sales_return_details`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $salesReturnDetailsNewDataRows = [];

            echo PHP_EOL . "Query all sales_return_details data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $sales_returns_details = Yii::$app->db2->createCommand("SELECT * FROM `sales_return_details` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($sales_returns_details as $sales_returns_detail) {
                $salesReturnDetailsNewDataRows[] = [
                    'sales_return_details_id' => $sales_returns_detail['sales_return_details_id'],
                    'sales_return_id' => $sales_returns_detail['sales_return_id'],
                    'sales_id' => $sales_returns_detail['sales_id'],
                    'item_id' => $sales_returns_detail['item_id'],
                    'brand_id' => $sales_returns_detail['brand_id'],
                    'size_id' => $sales_returns_detail['size_id'],
                    'refund_amount' => $sales_returns_detail['refund_amount'],
                    'sales_amount' => $sales_returns_detail['sales_amount'],
                    'total_amount' => $sales_returns_detail['total_amount'],
                    'quantity' => $sales_returns_detail['quantity'],
                ];

            }

            $sales_return_detailsNewData = new SalesReturnDetails();
            echo PHP_EOL . "Start Inserting sales_return_details data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(SalesReturnDetails::tableName(), $sales_return_detailsNewData->attributes(), $salesReturnDetailsNewDataRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function SerializeData()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start Serialize Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `id` ) AS total FROM `serialize`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $serializeNewDataRows = [];

            echo PHP_EOL . "Query all Serialize data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $serializes = Yii::$app->db2->createCommand("SELECT * FROM `serialize` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($serializes as $serialize) {
                $serializeNewDataRows[] = [
                    'id' => $serialize['id'],
                    'source' => $serialize['source'],
                    'refId' => $serialize['refId'],
                    'data' => $serialize['data'],
                    'created_by' => $serialize['created_by'],
                    'approved_by' => $serialize['approved_by'],
                    'status' => $serialize['status'],
                    'created_at' => $serialize['created_at'],
                    'updated_at' => $serialize['updated_at'],
                ];

            }

            $serializesNewData = new Serialize();
            echo PHP_EOL . "Start Inserting Serialize data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(Serialize::tableName(), $serializesNewData->attributes(), $serializeNewDataRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function Size()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start Size Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `size_id` ) AS total FROM `size`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $sizeNewDataRows = [];

            echo PHP_EOL . "Query all Size data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $sizes = Yii::$app->db2->createCommand("SELECT * FROM `size` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($sizes as $size) {
                $sizeNewDataRows[] = [
                    'size_id' => $size['size_id'],
                    'brand_id' => $size['brand_id'],
                    'item_id' => $size['item_id'],
                    'size_name' => $size['size_name'],
                    'size_image' => $size['size_image'],
                    'size_description' => $size['size_description'],
                    'unit' => $size['unit'],
                    'unit_quantity' => $size['unit_quantity'],
                    'lowest_price' => $size['lowest_price'],
                    'size_status' => $size['size_status'],
                ];

            }

            $sizeNewData = new Size();
            echo PHP_EOL . "Start Inserting Size data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(Size::tableName(), $sizeNewData->attributes(), $sizeNewDataRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function Transport()
    {

        echo PHP_EOL . "Start Transport Importing" . PHP_EOL;
        echo PHP_EOL . "Query all transport old database limit" . PHP_EOL;
        $models = Yii::$app->db2->createCommand("SELECT * FROM `transport`")->queryAll();

        $rows = [];
        foreach ($models as $model) {
            $rows[] = [
                'transport_id' => $model['transport_id'],
                'transport_name' => $model['transport_name'],
                'transport_address' => $model['transport_address'],
                'transport_contact_person' => $model['transport_contact_person'],
                'transport_contact_number' => $model['transport_contact_number']
            ];
        }

        echo PHP_EOL . "Start Inserting Size data to current table" . PHP_EOL;
        Yii::$app->db->createCommand()->batchInsert(Transport::tableName(), [
            'transport_id', 'transport_name', 'transport_address',
            'transport_contact_person', 'transport_contact_number'
        ], $rows)->execute();

    }

    public function User()
    {
        echo PHP_EOL . "Start Creating super admin...." . PHP_EOL;
        $data = [];
        $users = Yii::$app->db2->createCommand("SELECT * FROM `user` ")->queryAll();
        foreach ($users as $user) {
            if (strtoupper($user['username']) === 'SUPERADMIN') {
                $data[] = [
                    'user_id' => $user['user_id'],
                    'first_name' => $user['first_name'],
                    'last_name' => $user['last_name'],
                    'username' => $user['username'],
                    'email' => $user['email'],
                    'password_hash' => '$2y$13$a4Srf3B4L/ludGaiugopGOfBPg6q.EMmDgMscO4dXoLL.I.D5sPC6',
                    'user_image' => '',
                    'status' => 10,
                    'created_at' => DateTimeUtility::getDate('', 'Y-m-d H-i-s'),
                    'updated_at' => DateTimeUtility::getDate('', 'Y-m-d H-i-s'),
                ];
            } else {
                $data[] = [
                    'user_id' => $user['user_id'],
                    'first_name' => $user['first_name'],
                    'last_name' => $user['last_name'],
                    'username' => $user['username'],
                    'email' => $user['email'],
                    'password_hash' => $user['password_hash'],
                    'user_image' => '',
                    'status' => 10,
                    'created_at' => DateTimeUtility::getDate('', 'Y-m-d H-i-s'),
                    'updated_at' => DateTimeUtility::getDate('', 'Y-m-d H-i-s'),
                ];
            }
        }

        Yii::$app->db->createCommand()->batchInsert(User::tableName(), [
            'user_id', 'first_name', 'last_name', 'username', 'email', 'password_hash',
            'user_image', 'status', 'created_at', 'updated_at'
        ], $data)->execute();


        echo "successfully added superadmin" . PHP_EOL;
    }

    public function Warehouse()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start warehouse Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `warehouse_id` ) AS total FROM `warehouse`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $warehouseNewDataRows = [];

            echo PHP_EOL . "Query all warehouse data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $warehouses = Yii::$app->db2->createCommand("SELECT * FROM `warehouse` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($warehouses as $warehouse) {
                $warehouseNewDataRows[] = [
                    'warehouse_id' => $warehouse['warehouse_id'],
                    'warehouse_name' => $warehouse['warehouse_name'],
                    'city' => $warehouse['city'],
                    'address1' => $warehouse['address1'],
                    'address2' => $warehouse['address2'],
                    'postal_code' => $warehouse['postal_code'],
                ];

            }

            $warehouseNewData = new Warehouse();
            echo PHP_EOL . "Start Inserting warehouse data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(Warehouse::tableName(), $warehouseNewData->attributes(), $warehouseNewDataRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function Withdraw()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        echo PHP_EOL . "Start Withdraw Importing" . PHP_EOL;

        $record = Yii::$app->db2->createCommand("SELECT count( `id` ) AS total FROM `withdraw`")->queryAll();
        $totalRecords = $record[0]['total'];

        while ($totalRecords > $offset) {

            $withdrawNewDataRows = [];

            echo PHP_EOL . "Query all Withdraw data from old database limit {$offset}, {$limit}" . PHP_EOL;
            $withdraws = Yii::$app->db2->createCommand("SELECT * FROM `withdraw` LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($withdraws as $withdraw) {
                $withdrawNewDataRows[] = [
                    'id' => $withdraw['id'],
                    'user_id' => $withdraw['user_id'],
                    'outletId' => self::OUTLET_ID,
                    'withdraw_amount' => $withdraw['withdraw_amount'],
                    'remarks' => $withdraw['remarks'],
                    'type' => $withdraw['type'],
                    'bank_id' => $withdraw['bank_id'],
                    'branch_id' => $withdraw['branch_id'],
                    'status' => $withdraw['status'],
                    'created_at' => $withdraw['created_at'],
                    'updated_at' => $withdraw['updated_at'],
                ];

            }

            $withdrawNewData = new Withdraw();
            echo PHP_EOL . "Start Inserting Withdraw data to current table" . PHP_EOL;
            Yii::$app->db->createCommand()->batchInsert(Withdraw::tableName(), $withdrawNewData->attributes(), $withdrawNewDataRows)->execute();

            $offset = $offset + $limit;
        }

    }

    public function actionInit()
    {

        $this->trancate();
        $this->BankBranch();
        $this->BankReconciliation();
        $this->Brand();
        $this->BrandNew();
        $this->Buyer();
        $this->CashBook();
        $this->CashHandReceive();
        $this->City();
        $this->Client();

        $this->ClientPaymentDetails();
        $this->ClientPaymentHistory();
        $this->CustomerAccount();
        $this->CustomerWithdraw();
        $this->DepositBook();
        $this->Employee();
        $this->EmployeeDesignation();
        $this->ExpenseType();
        $this->Expense();
        $this->Item();

        $this->LC();
        $this->LCPayment();
        $this->LCPaymentType();

        $this->PaymentType();

        $this->ProductItemsPrice();
        $this->ProductStatement();
        $this->ProductStock();
        $this->ProductStockItems();

        $this->ProductUnit();
        $this->SalaryHistory();
        $this->Sales();
        $this->SalesDetails();
        $this->SalesReturn();
        $this->SalesReturnDetails();
        $this->SerializeData();
        $this->Size();

        $this->Transport();
        $this->User();

        $this->Warehouse();
        $this->Withdraw();

    }


}