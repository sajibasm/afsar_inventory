<?php

namespace app\controllers;

use app\components\SystemSettings;
use app\components\CashUtility;
use app\components\CommonUtility;
use app\components\DateTimeUtility;
use app\components\DepositUtility;
use app\components\Utility;
use app\models\CashBook;
use app\models\CashBookSearch;
use app\models\CashHandReceivedSearch;
use app\models\ClientPaymentHistorySearch;
use app\models\CustomerWithdrawSearch;
use app\models\DepositBook;
use app\models\DepositBookSearch;
use app\models\ExpenseSearch;
use app\models\LcPaymentSearch;
use app\models\MarketBookSearch;
use app\models\Outlet;
use app\models\ProductSearch;
use app\models\ProductStatement;
use app\models\ProductStatementSearch;
use app\models\ProductStockItemsSearch;
use app\models\SalesDetailsSearch;
use app\models\SalesReturnSearch;
use app\models\WarehousePaymentSearch;
use app\models\WithdrawSearch;
use kartik\mpdf\Pdf;
use Yii;
use yii\filters\AccessControl;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

use app\models\SalesSearch;

/**
 * BackupController implements the CRUD actions for Backup model.
 */
class ReportsController extends Controller
{
    /**
     * @inheritdoc
     */

    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'allow' => true,
                        'roles' => ['@'],
                    ]
                ]
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST']
                ]
            ]
        ];
    }

    /**
     * @param \yii\base\Action $event
     * @return bool|\yii\web\Response
     * @throws \yii\web\BadRequestHttpException
     */
    public function beforeAction($event){
        if(Yii::$app->asm->has()){
            return parent::beforeAction($event);
        }else{
            return Yii::$app->user->isGuest? $this->redirect(['/site/login']): $this->redirect(['/site/permission']);
        }
    }

    public function init()
    {
        //ini_set('max_execution_time', -1);
        //ini_set('memory_limit', '-1');
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * Lists all Backup models.
     * @return mixed
     */
    public function actionIndex()
    {

    }

    public function actionCustomerPaymentReceived()
    {
        $searchModel = new ClientPaymentHistorySearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('/client-payment-history/index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);

    }

    public function actionCustomerPaymentRefund()
    {
        $searchModel = new CustomerWithdrawSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('/customer-withdraw/index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);

    }

    public function actionWithdraw()
    {
        $searchModel = new WithdrawSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams, false);

        return $this->render('/withdraw/index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionCashHandReceived()
    {
        $searchModel = new CashHandReceivedSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams, false);

        return $this->render('/cash-hand-received/index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionTopProduct()
    {
        $searchModel = new SalesSearch();
        $searchModel->isReport = true;
        $dataProvider = $searchModel->topProductSearch(Yii::$app->request->queryParams);

        return $this->render('/sales/topProduct', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    /**
     * Lists all Sales models.
     * @return mixed
     */
    public function actionSales()
    {
        $searchModel = new SalesSearch();
        $searchModel->isReport = true;
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams, false);

        return $this->render('/sales/index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionMarket()
    {
        $searchModel = new MarketBookSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams, false);

        return $this->render('/market-book/index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionReturn()
    {
        $searchModel = new SalesReturnSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams, false);

        return $this->render('/sales-return/index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionCashBookReport($date, $outlet)
    {
        $outlet =  Outlet::findOne(Utility::decrypt($outlet));
        $date = Utility::decrypt($date);
        if($date && $outlet){
            $data = CashUtility::summery($outlet->outletId, $date);
            $pdf = new Pdf([
                'mode' => Pdf::MODE_UTF8, // leaner size using standard fonts
                'content' => $this->renderPartial('/cash-book/pdf',['data'=>$data, 'outlet'=>$outlet]),
                'options' => [
                    'title' => 'Cash Summery - '.SystemSettings::getStoreName(),
                    'subject' => 'Generating PDF files by Axial Solution Ltd.'
                ],
                'methods' => [
                    'SetHeader' => [SystemSettings::getStoreName().'||Generated On: ' . DateTimeUtility::getDate( null, SystemSettings::dateTimeFormat() )],
                    'SetFooter' => ['Developed By: Axial Solution Ltd.| |Page {PAGENO}'],
                ]
            ]);

            // return the pdf output as per the destination setting
            $pdf->getApi()->SetWatermarkText(SystemSettings::getStoreName());
            $pdf->getApi()->showWatermarkText =  true;
            $pdf->getApi()->watermarkTextAlpha =  0.040;
            return $pdf->render();

        }else{
            throw new NotFoundHttpException('The requested date is invalid.');
        }

    }

    public function actionCashBookSummery()
    {
        $model = new CashBook();
        $model->setScenario('Summery');
        if(Yii::$app->request->isPost){
            $model->load(Yii::$app->request->post());
            $this->redirect(['cash-book-report', 'date'=>Utility::encrypt($model->created_at), 'outlet'=>Utility::encrypt($model->outletId)]);
        }
        return $this->render('/cash-book/summery', ['model'=>$model]);
    }

    public function actionBankBookReport($date, $outlet)
    {
        $date = Utility::decrypt($date);
        $outlet =  Outlet::findOne(Utility::decrypt($outlet));

        if($date && $outlet){
            $data = DepositUtility::summery($outlet->outletId, $date);
            $pdf = new Pdf([
                'mode' => Pdf::MODE_UTF8, // leaner size using standard fonts
                'content' => $this->renderPartial('/deposit-book/pdf',['data'=>$data, 'outlet'=>$outlet]),
                'options' => [
                    'title' => 'Cash Summery - '.SystemSettings::getStoreName(),  //TODO need to add shop name from database config.
                    'subject' => 'Generating PDF files by Axial Solution Ltd.'
                ],
                'methods' => [
                    'SetHeader' => [SystemSettings::getStoreName().'||Generated On: ' . DateTimeUtility::getDate( null, SystemSettings::dateTimeFormat() )],
                    'SetFooter' => ['Developed By: Axial Solution Ltd.| |Page {PAGENO}'],
                ]
            ]);

            // return the pdf output as per the destination setting
            $pdf->getApi()->SetWatermarkText(SystemSettings::getStoreName());
            $pdf->getApi()->showWatermarkText =  true;
            $pdf->getApi()->watermarkTextAlpha =  0.040;
            return $pdf->render();
        }else{
            throw new NotFoundHttpException('The requested date is invalid.');
        }

    }

    public function actionBankBookSummery()
    {
        $model = new DepositBook();
        $model->setScenario('Summery');
        if(Yii::$app->request->isPost){
            $model->load(Yii::$app->request->post());
            $this->redirect(['bank-book-report', 'date'=>Utility::encrypt($model->created_at), 'outlet'=>Utility::encrypt($model->outletId)]);
        }

        return $this->render('/deposit-book/summery', ['model'=>$model]);
    }

    public function actionDepositBook()
    {
        $searchModel = new DepositBookSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams, false);
        return $this->render('/deposit-book/index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionCashBook()
    {
        $searchModel = new CashBookSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams, false);

        return $this->render('/cash-book/index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionProductBrand()
    {
        $searchModel = new SalesDetailsSearch();
        $searchModel->sortingBy = 1;
        $dataProvider = $searchModel->brandWiseTopCustomer(Yii::$app->request->queryParams);

        return $this->render('/product-stock/brand', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionProductCustomer()
    {
        $searchModel = new SalesDetailsSearch();
        $dataProvider = $searchModel->potentialCustomerByBrand(Yii::$app->request->queryParams);
        return $this->render('/product-stock/customer', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionProductStock()
    {
        $searchModel = new ProductStockItemsSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams, false);

        return $this->render('/product-stock/index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionProductStockMovement()
    {
        $searchModel = new ProductStockItemsSearch();
        $dataProvider = $searchModel->searchReport(Yii::$app->request->queryParams, false);

        return $this->render('/product-stock/index-movement', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionExpense()
    {
        $searchModel = new ExpenseSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams, false);

        return $this->render('/expense/index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionWarehouse()
    {
        $searchModel = new WarehousePaymentSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams, false);

        return $this->render('/warehouse-payment/index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionLc()
    {
        $searchModel = new LcPaymentSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams, false);

        return $this->render('/lc-payment/index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    public function actionProduct()
    {
        $searchModel = new ProductStatementSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams, false);

        return $this->render('/product-statement/index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
    }

    protected function findModel($id)
    {
        if (($model = Backup::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }
}
