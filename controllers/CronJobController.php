<?php

namespace app\controllers;

use app\components\SystemSettings;
use app\components\CashUtility;
use app\components\CommonUtility;
use app\components\CustomerUtility;
use app\components\DateTimeUtility;
use app\components\DBUtility;
use app\components\Utility;
use app\models\Bank;
use app\models\BankReconciliation;
use app\models\Branch;
use app\models\Brand;
use app\models\BrandNew;
use app\models\CashBook;
use app\models\CashHandReceived;
use app\models\City;
use app\models\Client;
use app\models\ClientPaymentDetails;
use app\models\ClientPaymentHistory;
use app\models\CustomerAccount;
use app\models\DepositBook;
use app\models\Expense;
use app\models\ExpenseType;
use app\models\Item;
use app\models\Lc;
use app\models\LcPayment;
use app\models\LcPaymentType;
use app\models\PaymentType;
use app\models\ProductItemsPrice;
use app\models\ProductStatement;
use app\models\ProductStock;
use app\models\ProductStockItems;
use app\models\ProductUnit;
use app\models\ReturnDraft;
use app\models\ReturnDraftSearch;
use app\models\Sales;
use app\models\SalesDetails;
use app\models\SalesDetailsSearch;
use app\models\SalesDraft;
use app\models\SalesDraftSearch;
use app\models\SalesReturn;
use app\models\SalesReturnDetails;
use app\models\Size;
use app\models\Transport;
use app\models\Warehouse;
use app\models\WarehousePayment;
use app\models\Withdraw;
use DateInterval;
use DateTime;
use DateTimeZone;
use Yii;
use yii\helpers\Json;
use yii\web\Controller;
use yii\filters\VerbFilter;

/**
 * AppSettingsController implements the CRUD actions for AppSettings model.
 */
class CronJobController extends Controller
{
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST']
                ]
            ]
        ];
    }


    const REMARKS_COMMENT = 'Migrated';

    public $userId = 1;

    public $paymentTypeCash = 1;
    public $paymentTypeBank = 2;
    public $abcClientId = 1200;
    public $xyzClientId = 1201;

    public $warehouseDefaultId = 100;
    public $lcDefaultId = 50;
    public $lcPaymentDefaultId = 1;
    public $defaultTimeStamp = 1285437600;


    public $maxCustomer = 0;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        ini_set('max_execution_time', -1);
        ini_set('memory_limit', '-1');
    }

    public function clean()
    {
        Yii::$app->db->createCommand("DELETE FROM user_role")->execute();
        echo '<br>'."User Role table has been cleaned".'<br>';

        Yii::$app->db->createCommand("DELETE FROM user")->execute();
        echo '<br>'."User table has been cleaned".'<br>';

        Yii::$app->db->createCommand("DELETE FROM auth_assignment")->execute();
        echo '<br>'."Auth Assignment table has been cleaned".'<br>';

        Yii::$app->db->createCommand("DELETE FROM auth_item")->execute();
        echo '<br>'."Auth Item table has been cleaned".'<br>';

        Yii::$app->db->createCommand("DELETE FROM auth_item_child")->execute();
        echo '<br>'."Auth Item Child table has been cleaned".'<br>';

        Yii::$app->db->createCommand("DELETE FROM auth_rule")->execute();
        echo '<br>'."Auth Rule table has been cleaned".'<br>';


        #########################################################

        Yii::$app->db->createCommand("DELETE FROM size")->execute();
        echo '<br>'."Size table has been cleaned".'<br>';

        Yii::$app->db->createCommand("DELETE FROM brand")->execute();
        echo '<br>'."Brand table has been cleaned".'<br>';

        Yii::$app->db->createCommand("DELETE FROM item")->execute();
        echo '<br>'."Item table has been cleaned".'<br>';

        Yii::$app->db->createCommand("DELETE FROM client")->execute();
        echo '<br>'."Client table has been cleaned".'<br>';

        Yii::$app->db->createCommand("DELETE FROM warehouse")->execute();
        echo '<br>'."Warehouse table has been cleaned".'<br>';

        Yii::$app->db->createCommand("DELETE FROM city")->execute();
        echo '<br>'."City table has been cleaned".'<br>';

        Yii::$app->db->createCommand("DELETE FROM branch")->execute();
        echo '<br>'."Branch table has been cleaned".'<br>';

        Yii::$app->db->createCommand("DELETE FROM bank")->execute();
        echo '<br>'."Bank table has been cleaned".'<br>';

        Yii::$app->db->createCommand("DELETE FROM transport")->execute();
        echo '<br>'."Transport table has been cleaned".'<br>';

        Yii::$app->db->createCommand("DELETE FROM lc")->execute();
        echo '<br>'."LC table has been cleaned".'<br>';

        Yii::$app->db->createCommand("DELETE FROM bank_reconciliation")->execute();
        echo '<br>'."LC table has been cleaned".'<br>';


    }

    public function ImportSchema()
    {
        DBUtility::loadSchema();
    }

    public function ImportData()
    {
        echo '<br>'."Start importing db data....".'<br>';
        $file = Yii::getAlias('@app').'/database/data.sql';
        $data = file_get_contents($file);
        Yii::$app->db->createCommand($data)->execute();
        echo "successfully imported.".'<br>';
    }

    public function Role()
    {

        echo '<br>'."Start RBAC....".'<br>';
        $auth = Yii::$app->authManager;

        $executive = $auth->createRole('sales executive');
        $auth->add($executive);


        $manager = $auth->createRole('Manager');
        $auth->add($manager);
        $auth->addChild($manager, $executive);

        $admin = $auth->createRole('Admin');
        $auth->add($admin);
        $auth->addChild($admin, $manager);


        $superadmin = $auth->createRole('Super Admin');
        $auth->add($superadmin);
        $auth->addChild($superadmin, $admin);


        /*$auth->assign($executive, 4);
        $auth->assign($manager, 3);
        $auth->assign($admin, 2);
        $auth->assign($superadmin, 1);*/

        Yii::$app->db->createCommand("INSERT INTO user_role (user_role_id, user_role_name, user_role_status) VALUES
                                    (1, 'Super Admin', 'active'),
                                    (2, 'Admin', 'active'),
                                    (3, 'Manager', 'active'),
                                    (4, 'Sales Executive', 'active');")->execute();
        echo "successfully added RBAC.".'<br>';

    }

    public function User()
    {
        echo '<br>'."Start Creating super admin....".'<br>';
        $user = new User();
        $user->user_role_id = 1; // for Super admin. more details check user role table.
        $user->first_name = 'asm';
        $user->last_name = 'hossain';
        $user->username = 'superadmin';
        $user->password = Yii::$app->security->generatePasswordHash('access123');
        $user->auth_key = Yii::$app->security->generateRandomString();
        $user->access_token =Yii::$app->security->generateRandomString();
        $user->user_status = User::STATUS_ACTIVE;
        if($user->save()){
            $auth = Yii::$app->authManager;
            $authorRole = $auth->getRole('Super Admin');
            $auth->assign($authorRole, $user->user_id);

        }else{
            print_r($user->getErrors());
        }

        $this->userId = $user->user_id;
        echo "successfully added superadmin".'<br>';
    }

    public function Item()
    {

        echo '<br>'."Start Items Importing".'<br>';
        echo "Query all items data from old table".'<br>';
        $data = Yii::$app->db2->createCommand("SELECT id, item FROM asm_item")->queryAll();

        $rows = [];
        foreach($data as $item)
        {
            $rows[] = [
                'item_id'=>$item['id'],
                'item_name'=>$item['item']?trim($item['item']):'Not Found#'.$item['id'],
                'product_status'=>'active',

            ];
        }


        $missing = Yii::$app->db2->createCommand("SELECT DISTINCT item_id FROM asm_brand WHERE asm_brand.item_id NOT IN (SELECT id FROM asm_item)")->queryAll();
        foreach ($missing as $m) {
            $rows[] = [
                'item_id'=>$m['item_id'],
                'item_name'=>'Not Found#'.$m['item_id'],
                'product_status'=>'active',

            ];
        }

        $item = new Item();
        echo "Start Inserting items to current table".'<br>';
        Yii::$app->db->createCommand()->batchInsert(Item::tableName(), $item->attributes(), $rows)->execute();
        echo "successfully inserted items".'<br>';

    }

    public function Brand()
    {
        $rows = [];

        echo '<br>'."Start Brands Importing".'<br>';
        echo "Query all brands data from old table".'<br>';

        $brand = Yii::$app->db2->createCommand("SELECT * FROM asm_brand")->queryAll();

        foreach($brand as $data)
        {
            $rows[] = [
                'id'=>null,
                'brand_id'=>$data['id'],
                'item_id'=>$data['item_id'],
                'brand_name'=>$data['brand']?trim($data['brand']):'Not Found# '.$data['id'],
                'brand_status'=>Brand::STATUS_ACTIVE,
            ];
        }


        $missing = Yii::$app->db2->createCommand("SELECT DISTINCT brand_id, item_id FROM asm_size WHERE asm_size.brand_id NOT IN (SELECT id FROM asm_brand)")->queryAll();
        foreach ($missing as $m) {
            $rows[] = [
                'id'=>null,
                'brand_id'=>$m['brand_id'],
                'item_id'=>$m['item_id'],
                'brand_name'=>'Not Found#'.$m['brand_id'],
                'brand_status'=>Brand::STATUS_ACTIVE,

            ];
        }

        $brand = new Brand();
        echo "Start Inserting brands to current table".'<br>';
        Yii::$app->db->createCommand()->batchInsert(Brand::tableName(), $brand->attributes(), $rows)->execute();
        echo "successfully inserted brands".'<br>';

    }

    public function Size()
    {
        $rows = [];

        echo '<br>'."Start Sizes Importing".'<br>';
        echo "Query all sizes data from old table".'<br>';
        $size = Yii::$app->db2->createCommand("SELECT * FROM asm_size")->queryAll();
        foreach($size as $data)
        {

            $sizeId = (int)$data['id'];
            if(is_int($sizeId) || $data['id']!='' || !empty($data['id'])) {

                $rows[] = [
                    'size_id' => (int)$data['id'],
                    'brand_id' => (int)$data['brand_id'],
                    'item_id' => (int)$data['item_id'],
                    'size_name' => $data['size'] ? trim($data['size']) : 'Not Found#' . $data['id'],
                    'size_image' => 'no-image.jpg',
                    'size_description' => '',
                    'unit' => 1,
                    'unit_quantity' => 1,
                    'lowest_price' => 2,
                    'size_status' => Size::STATUS_ACTIVE
                ];
            }
        }

        $missing = Yii::$app->db2->createCommand("SELECT distinct size_id, item_id, brand_id FROM asm_stock_status WHERE asm_stock_status.size_id NOT IN (SELECT id FROM asm_size)")->queryAll();
        foreach ($missing as $m) {

            $sizeId = (int)$data['id'];
            if(is_int($sizeId) || $data['id']!='' || !empty($data['id'])) {


                $rows[] = [
                    'size_id'=>(int)$m['size_id'],
                    'brand_id'=>(int)$m['brand_id'],
                    'item_id'=>(int)$m['item_id'],
                    'size_name'=>'Not Found#'.$m['size_id'],
                    'size_image'=>'no-image.jpg',
                    'size_description'=>'',
                    'unit'=>1,
                    'unit_quantity'=>1,
                    'lowest_price'=>2,
                    'size_status'=>Size::STATUS_ACTIVE
                ];

            }

        }


        $size = new Size();
        echo "Start Inserting size to current table".'<br>';
        Yii::$app->db->createCommand()->batchInsert(Size::tableName(), $size->attributes(), $rows)->execute();
        echo "successfully inserted size".'<br>';
    }

    public function trimCustomerName($string)
    {

        $string = rtrim($string, '-');
        $explode = explode('-',$string);

        if(count($explode)>=3){
            $name = trim($explode[0]).'-'.trim($explode[1]);
            $address = trim($explode[2]);
        }elseif(count($explode)>1){
            $name = trim($explode[0]);
            $address = trim($explode[1]);
        }else{
            $name = trim($explode[0]);
            $address = null;
        }

        if($address==null){
            $explode = explode(',',$string);
            if(count($explode)>=3){
                $name = trim($explode[0]).'-'.trim($explode[1]);

            }elseif(count($explode)>1){
                $name = trim($explode[0]);
            }else{
                $name = trim($explode[0]);
            }
        }

        return rtrim(rtrim(rtrim($name, ':'), '.'), '-');
    }

    public function Customer()
    {
        echo '<br>'."Start Customer Importing".'<br>';

        $rows = [];

        echo "Query all Customers data from old table".'<br>';
        $result = Yii::$app->db2->createCommand("SELECT * FROM asm_client")->queryAll();

        $clientId = 0;

        foreach($result as $data)
        {
            if((int)$data['id'] > $this->maxCustomer){
                $this->maxCustomer = (int) $data['id'];
            }

            if(empty($data['location_id'])) {
                $cityId = 9;
            }else{
                $cityId = $data['location_id'];
            }

            $string = rtrim($data['name'], '-');
            $explode = explode('-',$string);

            if(count($explode)>=3){
                $name = trim($explode[0]).'-'.trim($explode[1]);
                $address = trim($explode[2]);
            }elseif(count($explode)>1){
                $name = trim($explode[0]);
                $address = trim($explode[1]);
            }else{
                $name = trim($explode[0]);
                $address = null;
            }


            if($address==null){
                $explode = explode(',',$string);
                if(count($explode)>=3){
                    $name = trim($explode[0]).'-'.trim($explode[1]);
                    $address = trim($explode[2]);
                }elseif(count($explode)>1){
                    $name = trim($explode[0]);
                    $address = trim($explode[1]);
                }else{
                    $name = trim($explode[0]);
                    $address = null;
                }
            }


            if($data['id']>$clientId){
                $clientId = $data['id'];
            }

            $rows[$data['id']] = [
                'client_id'=>$data['id'],
                'client_name'=>rtrim(rtrim(rtrim($name, ':'), '.'), '-'),
                'client_city'=>$data['location_id']?$data['location_id']:9,
                'client_address1'=>rtrim(rtrim($address, ':'), '.'),
                'client_address2'=>$data['address'],
                'client_contact_number'=>'',
                'client_contact_person'=>'',
                'client_contact_person_number'=>'',
                'email'=>'',
                'client_type'=>Client::CUSTOMER_TYPE_REGULAR,
                'client_balance'=>0,
            ];


        }

        $this->xyzClientId = $this->maxCustomer+1;
        $this->abcClientId = $this->maxCustomer+2;

        $rows[] = [
            'client_id'=>$this->xyzClientId,
            'client_name'=>'XYZ',
            'client_city'=>9,
            'client_address1'=>'Jubilee Road',
            'client_address2'=>'CTG',
            'client_contact_number'=>'',
            'client_contact_person'=>'',
            'client_contact_person_number'=>'***********',
            'email'=>null,
            'client_type'=>Client::CUSTOMER_TYPE_IRREGULAR,
            'client_balance'=>0,
        ];

        $client = new Client();
        echo "Start Inserting Customers to current table".'<br>';
        Yii::$app->db->createCommand()->batchInsert(Client::tableName(), $client->attributes(), $rows)->execute();
        echo "successfully inserted Customers".'<br>';


        $result = Yii::$app->db->createCommand("SELECT client_id, client_name FROM client WHERE client_name='ABC' OR client_name='XYZ'")->queryAll();
        foreach ($result as $c){
            if($c['client_name']=='XYZ'){
                $this->xyzClientId = $c['client_id'];
            }else{
                $this->abcClientId = $c['client_id'];
            }
        }
    }

    public function City()
    {
        echo '<br>'."Start City Importing".'<br>';

        $rows = [];

        echo "Query all Cities data from old table".'<br>';

        $results = Yii::$app->db2->createCommand("SELECT * FROM asm_client_location")->queryAll();
        foreach($results as $data)
        {
            if(!empty($data['location'])){
                $rows[] = [
                    'city_id'=>$data['id'],
                    'city_name'=>trim($data['location']),
                ];
            }
        }


        $city = new City();
        echo "Start Inserting Cities to current table".'<br>';
        Yii::$app->db->createCommand()->batchInsert(City::tableName(), $city->attributes(), $rows)->execute();
        echo "successfully inserted Cities".'<br>';
    }

    public function Bank()
    {
        echo '<br>'."Start Bank Importing".'<br>';

        $rows = [];
        $rowLastId = 0;
        $branchRows = [];

        $unique = [];

        echo "Query all Bank data from old table".'<br>';

        $results = Yii::$app->db2->createCommand("SELECT * FROM asm_bank GROUP BY (bank)")->queryAll();

        foreach ($results  as $data){
            if(!empty($data['bank'])){
                $unique[trim($data['bank'])] = [
                    'bank_id'=>$data['id'],
                    'bank_name'=>trim($data['bank']),
                ];

            }

            if($data['id']>$rowLastId){
                $rowLastId = $data['id'];
            }
        }

        $results2 = Yii::$app->db2->createCommand("SELECT * FROM asm_lc GROUP BY (bank)")->queryAll();

        foreach ($results2  as $data){
            if(!empty($data['bank'])){
                $rowLastId++;
                $unique[trim($data['bank'])] = [
                    'bank_id'=>$rowLastId+1,
                    'bank_name'=>trim($data['bank']),
                ];
            }
        }
        $index = 1;
        foreach($unique as $data)
        {

            $rows[] = [
                'bank_id'=>$data['bank_id'],
                'bank_name'=>$data['bank_name'],
            ];

            $branchRows[] = [
                'branch_id'=>$index++,
                'bank_id'=>$data['bank_id'],
                'branch_name'=>'Jubilee Road, Chittagong',
            ];

        }


        $bank = new Bank();
        $branch = new Branch();
        echo "Start Inserting Bank to current table".'<br>';
        Yii::$app->db->createCommand()->batchInsert(Bank::tableName(), $bank->attributes(), $rows)->execute();
        Yii::$app->db->createCommand()->batchInsert(Branch::tableName(), $branch->attributes(), $branchRows)->execute();
        echo "successfully inserted Bank".'<br>';
    }

    public function Warehouse()
    {
        echo '<br>'."Start Warehouse Importing".'<br>';

        $rows = [];

        echo "Query all Warehouse data from old table".'<br>';

        $results = Yii::$app->db2->createCommand("SELECT * FROM asm_warehouse")->queryAll();
        foreach($results as $data)
        {
            if(!empty($data['name'])){
                $rows[] = [
                    'warehouse_id'=>$data['id'],
                    'warehouse_name'=>trim($data['name']),
                    'city'=>9, // for chittagong
                    'address1'=>'', // for chittagong
                    'address2'=>'', // for chittagong
                    'postal_code'=>4000, // for chittagong
                ];
            }
        }


        $warehouse = new Warehouse();
        echo "Start Inserting Warehouse to current table".'<br>';
        Yii::$app->db->createCommand()->batchInsert(Warehouse::tableName(), $warehouse->attributes(), $rows)->execute();
        echo "successfully inserted Warehouse".'<br>';
    }

    public function Transport()
    {
        echo '<br>'."Start Transport Importing".'<br>';

        $rows = [];

        echo "Query all Warehouse data from old table".'<br>';

        $results = Yii::$app->db2->createCommand("SELECT * FROM asm_transport")->queryAll();
        foreach($results as $data)
        {
            if(!empty($data['name'])){

                $rows[] = [
                    'transport_id'=>$data['id'],
                    'transport_name'=>trim($data['name']),
                    'transport_address'=>'', // for chittagong
                    'transport_contact_person'=>'', // for chittagong
                    'transport_contact_number'=>'', // for chittagong
                ];
            }
        }


        $transport = new Transport();
        echo "Start Inserting Transport to current table".'<br>';
        Yii::$app->db->createCommand()->batchInsert(Transport::tableName(), $transport->attributes(), $rows)->execute();
        echo "successfully inserted Transport".'<br>';
    }

    public function LC()
    {
        echo '<br>'."Start LC Importing".'<br>';

        $rows = [];

        echo "Query all LC data from old table".'<br>';

        $results = Yii::$app->db2->createCommand("SELECT * FROM asm_lc")->queryAll();
        foreach($results as $data)
        {

            if(!empty($data['name'])){

                $model = Bank::find()->where(['bank_name'=>$data['bank']])->one();
                $branch = Branch::find()->where(['bank_id'=>$model->bank_id])->one();

                $rows[] = [
                    'lc_id'=>$data['id'],
                    'lc_name'=>$data['name'],
                    'lc_number'=>$data['number'],
                    'remarks'=> self::REMARKS_COMMENT,
                    'branch_id'=>$branch->branch_id,
                    'user_id'=>$this->userId,
                    'created_date'=>date('Y-m-d H:i:s', $data['date']),
                    'updated_date'=>date('Y-m-d H:i:s'),
                ];
            }
        }

        $lc = new Lc();
        echo "Start Inserting LC to current table".'<br>';
        Yii::$app->db->createCommand()->batchInsert(Lc::tableName(), $lc->attributes(), $rows)->execute();
        echo "successfully inserted LC".'<br>';
    }

    public function PaymentType()
    {
        echo '<br>'."Payment Type Cash adding".'<br>';
        $paymentType = new PaymentType();
        $paymentType->payment_type_id = $this->paymentTypeCash;
        $paymentType->payment_type_name = 'Cash';
        $paymentType->type = PaymentType::TYPE_CASH;
        $paymentType->save();
        echo '<br>'."Payment Type Cash added".'<br>';


        echo '<br>'."Payment Type Bank adding".'<br>';
        $paymentType = new PaymentType();
        $paymentType->payment_type_id = 11;
        $paymentType->payment_type_name = 'Bank';
        $paymentType->type = PaymentType::TYPE_DEPOSIT;
        $paymentType->save();
        echo '<br>'."Payment Type Bank added".'<br>';

    }

    public function Product()
    {

        $group = [];

        $timezone = new DateTimeZone(SystemSettings::getTimeZone());


        echo '<br>'."Start Stock Importing".'<br>';

        echo '<br>'."Query all stock data by warehouse group".'<br>';
        $warehouseGroup = Yii::$app->db2->createCommand("SELECT * FROM asm_stock_status GROUP BY (warehouse_id)")->queryAll();

        //Utility::debug(count($warehouseGroup));

        foreach ($warehouseGroup as $warehouse){

            try{
                if(!empty($warehouse['warehouse_id']) && $warehouse['size_id'] && !empty($warehouse['quantity']) ){

                    $dateTime =  new DateTime();
                    $date =  $dateTime->setTimestamp($warehouse['date'])->setTimezone($timezone)->format('Y-m-d H:i:s');

                    $group[] = [
                        'id'=>$warehouse['warehouse_id'],
                        'name'=>$warehouse['warehouse'],
                        'date'=>$date
                    ];
                }

            }catch (\Exception $e){
                echo "Hello";
                Utility::debug($warehouse);
            }

        }

        foreach ($group  as $g){

            $date = $g['date'];
            $productStockItemRows = [];
            $productItemPriceRows = [];
            $productStatementRows = [];

            echo '<br>'."Query all Stock data from old table for Warehouse# ".$g['name']." ID# ".$g['id'].'<br>';
            $sql = "SELECT * FROM asm_stock_status where warehouse_id='".$g['id']."'";
            $results = Yii::$app->db2->createCommand($sql)->queryAll();
            //print_r(count($results));

//            Utility::debug(count($results), false);
//            Utility::debug($sql);

            $productStock = new ProductStock();
            $productStock->warehouse_id = $this->getWarehouseIds();
            $productStock->lc_id = $this->getLcIds();
            $productStock->user_id = Yii::$app->user->getId();
            $productStock->type = ProductStock::TYPE_IMPORT;
            $productStock->remarks = self::REMARKS_COMMENT.' for Warehouse# '.$g['name'];
            $productStock->created_at = $date;
            $productStock->updated_at = date('Y-m-d H:i:s');

            if(!$productStock->save()){
                print_r($productStock->getErrors());
            }

            foreach($results as $data) {

                $cost = (float) $data['cost'];
                $wholeSale = (float) $data['wholesell'];
                $retail = (float) $data['retail'];

                if($wholeSale>0){

                    if($retail==0) {
                        $retail = ceil((($wholeSale/100)*105));
                    }

                    if($cost==0){
                        $cost = ceil((($wholeSale/100)*95));
                    }

                    if($data['total_quentity']>0){

                        $productStockItemRows[] = [
                            'product_stock_items_id'=>null,
                            'product_stock_id'=>$productStock->product_stock_id,
                            'item_id'=>(int)$data['item_id'],
                            'brand_id'=>(int)$data['brand_id'],
                            'size_id'=>(int)$data['size_id'],
                            'cost_price'=>(float)$cost,
                            'wholesale_price'=>(float)$wholeSale,
                            'retail_price'=>(float)$retail,
                            'previous_quantity'=>(float)$data['quantity'],
                            'new_quantity'=>(float)$data['total_quentity'],
                            'total_quantity'=>(float)$data['total_quentity'],
                        ];

                        $productItemPriceRows[] = [
                            'product_stock_items_id'=>null,
                            'item_id'=>(int)$data['item_id'],
                            'brand_id'=>(int)$data['brand_id'],
                            'size_id'=>(int)$data['size_id'],
                            'cost_price'=>(float)$cost,
                            'wholesale_price'=>(float)$wholeSale,
                            'retail_price'=>(float)$retail,
                            'quantity'=>(float)$data['total_quentity'],
                            'total_quantity'=>(float)$data['total_quentity'],
                            'alert_quantity'=>rand(0, 10),
                        ];

                        $productStatementRows[] = [
                            'product_statement_id'=>null,
                            'item_id'=>(int)$data['item_id'],
                            'brand_id'=>(int)$data['brand_id'],
                            'size_id'=>(int)$data['size_id'],
                            'quantity'=>(float)$data['total_quentity'],
                            'type'=>ProductStatement::TYPE_STOCK,
                            'remarks'=>self::REMARKS_COMMENT.' for Warehouse# '.$g['name'],
                            'reference_id'=>(int)$productStock->product_stock_id,
                            'user_id'=>$this->userId,
                            'created_at'=>$date,
                            'updated_at'=>date('Y-m-d H:i:s'),
                        ];
                    }
                }
            }


            if(count($productStockItemRows)>0){
                $productStockItems = new ProductStockItems();
                echo '<br>'."Start Inserting Product Stock items to current table" . '<br>';
                Yii::$app->db->createCommand()->batchInsert(ProductStockItems::tableName(), $productStockItems->attributes(), $productStockItemRows)->execute();
                echo '<br>'."successfully inserted Product Stock items" . '<br>';
            }

            if(count($productStatementRows)){
                $productStatement = new ProductStatement();
                echo '<br>'."Start Inserting Product Statement to current table" . '<br>';
                Yii::$app->db->createCommand()->batchInsert(ProductStatement::tableName(), $productStatement->attributes(), $productStatementRows)->execute();
                echo '<br>'."successfully inserted Product Statement" . '<br>';
            }

            if(count($productItemPriceRows)){
                $ProductItemsPrice = new ProductItemsPrice();
                echo '<br>'."Start Inserting ProductItemsPrice to current table" . '<br>';
                Yii::$app->db->createCommand()->batchInsert(ProductItemsPrice::tableName(), $ProductItemsPrice->attributes(), $productItemPriceRows)->execute();
                echo '<br>'."successfully inserted ProductItemsPrice" . '<br>';
            }

        }

    }

    public function oldDBClean()
    {
        //$warehouseGroup = Yii::$app->db2->createCommand("DELETE FROM asm_stock_status WHERE size_id=0;")->execute();
        //$warehouseGroup = Yii::$app->db2->createCommand("DELETE FROM asm_stock_status WHERE size_id='';")->execute();
    }

    public function sales()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        $salesRows = [];

        echo '<br>'."Start Sales Invoice Importing".'<br>';

        $record = Yii::$app->db2->createCommand("SELECT count( id ) AS total FROM asm_sells")->queryAll();
        $totalRecords = $record[0]['total'];


        while($totalRecords>$offset){

            $salesRows = [];
            $cashBookRows = [];

            echo '<br>'."Query all Sales data from old database limit {$offset}, {$limit}".'<br>';
            $sells = Yii::$app->db2->createCommand("SELECT * FROM asm_sells LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($sells as $invoice){

                $clientType = Sales::CUSTOMER_TYPE_REGULAR;


                if($invoice['client_id']=='000' || $invoice['client_id']==''){
                    $clientId = $this->xyzClientId;
                    $clientType = Sales::CUSTOMER_TYPE_IRREGULAR;
                }

                $salesRows[] = [
                    'sales_id'=>$invoice['id'],
                    'memo_id'=>$invoice['id'],
                    'client_id'=>$clientId,
                    'client_name'=>$invoice['client'],
                    'client_mobile'=>'+880-00000000',
                    'client_type'=>$clientType,
                    'user_id'=>$this->userId,
                    'contact_number'=>$invoice['phone']?$invoice['phone']:'+880-00000000',
                    'paid_amount'=>$invoice['paid'],
                    'due_amount'=>$invoice['due'],
                    'discount_amount'=>$invoice['discount'],
                    'total_amount'=>$invoice['total_amount'],
                    'remarks'=>self::REMARKS_COMMENT.' '.$invoice['discountremarks'],
                    'type'=>Sales::TYPE_SALES,
                    'payment_type'=>$this->paymentTypeCash,
                    'bank'=>0,
                    'branch'=>0,
                    'created_at'=>date('Y-m-d H:i;s', $invoice['date']),
                    'updated_at'=>date('Y-m-d H:i:s'),
                ];

                if($invoice['paid']>0){
                    $cashBookRows[] = [
                        'id'=>'',
                        'cash_in'=>$invoice['paid'],
                        'cash_out'=>0,
                        'source'=>CashBook::SOURCE_SALES,
                        'ref_user_id'=>$this->userId,
                        'reference_id'=>$invoice['id'],
                        'remarks'=>self::REMARKS_COMMENT,
                        'created_at'=>date('Y-m-d H:i;s', $invoice['date']),
                        'updated_at'=>date('Y-m-d H:i:s'),

                    ];
                }


            }

            $sales = new Sales();
            echo '<br>'."Start Inserting Sales data to current table" . '<br>';
            Yii::$app->db->createCommand()->batchInsert(Sales::tableName(), $sales->attributes(), $salesRows)->execute();
            echo '<br>'."successfully inserted Sales table" . '<br>';

            $cash = new CashBook();
            echo '<br>'."Start Inserting CashBook data to current table" . '<br>';
            Yii::$app->db->createCommand()->batchInsert(CashBook::tableName(), $cash->attributes(), $cashBookRows)->execute();
            echo '<br>'."successfully inserted CashBook table" . '<br>';

            $offset = $offset + $limit;

            //sleep(1);
        }
    }

    public function salesItems()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;

        $salesDetailsRows = [];

        echo '<br>'."Start Sales Items  Importing".'<br>';

        $record = Yii::$app->db2->createCommand("SELECT count( id ) AS total FROM asm_sells_item")->queryAll();
        $totalRecords = $record[0]['total'];


        while($totalRecords>$offset){

            $salesDetailsRows = [];
            $productStatementRows = [];

            echo '<br>'."Query all Sales Items data from old database limit {$offset}, {$limit}".'<br>';
            $sells = Yii::$app->db2->createCommand("SELECT * FROM asm_sells_item LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($sells as $invoice){

                $salesDetailsRows[] = [
                    'sales_details_id'=>'',
                    'sales_id'=>$invoice['invoice_id'],
                    'item_id'=>$invoice['item_id'],
                    'brand_id'=>$invoice['brand_id'],
                    'size_id'=>$invoice['size_id'],
                    'unit'=>$invoice['unit'],
                    'cost_amount'=>$invoice['cost'],
                    'sales_amount'=>$invoice['price'],
                    'total_amount'=>$invoice['total'],
                    'quantity'=>$invoice['quentity'],
                    'challan_unit'=>strtoupper($invoice['unit']),
                    'challan_quantity'=>$invoice['quentity'],
                ];

                $productStatementRows[] = [
                    'product_statement_id'=>'',
                    'item_id'=>$invoice['item_id'],
                    'brand_id'=>$invoice['brand_id'],
                    'size_id'=>$invoice['size_id'],
                    'quantity'=>-$invoice['quentity'],
                    'type'=>ProductStatement::TYPE_SALES,
                    'remarks'=>self::REMARKS_COMMENT,
                    'reference_id'=>$invoice['invoice_id'],
                    'user_id'=>$this->userId,
                    'created_at'=>date('Y-m-d H:i:s', $invoice['date']),
                    'updated_at'=>date('Y-m-d H:i:s'),
                ];

            }

            if(count($salesDetailsRows)>0){
                $salesDetails = new SalesDetails();
                echo '<br>'."Start Inserting Sales Items data to current table" . '<br>';
                Yii::$app->db->createCommand()->batchInsert(SalesDetails::tableName(), $salesDetails->attributes(), $salesDetailsRows)->execute();
                echo '<br>'."successfully inserted Sales Items table" . '<br>';
            }

            if(count($productStatementRows)){
                $productStatement = new ProductStatement();
                echo '<br>'."Start Inserting Product Statement to current table" . '<br>';
                Yii::$app->db->createCommand()->batchInsert(ProductStatement::tableName(), $productStatement->attributes(), $productStatementRows)->execute();
                echo '<br>'."successfully inserted Product Statement" . '<br>';
            }

            $offset = $offset + $limit;
        }
    }

    public function salesInvoice()
    {
        $offset = 0;
        $limit = 1000;
        $totalRecords = 0;
        $salesRows = [];

        echo '<br>'."Start Sales Invoice Importing".'<br>';

        $record = Yii::$app->db2->createCommand("SELECT count( id ) AS total FROM asm_sells")->queryAll();
        $totalRecords = $record[0]['total'];

        $timezone = new DateTimeZone('Asia/Dhaka');

        $sales = new Sales();
        $cash = new CashBook();
        $customer = new CustomerAccount();

        while($totalRecords>$offset){

            $salesRows = [];
            $cashBookRows = [];
            $customerAccount = [];

            echo '<br>'."Query all Sales data from old database limit {$offset}, {$limit}".'<br>';
            $sells = Yii::$app->db2->createCommand("SELECT * FROM asm_sells LIMIT {$offset}, {$limit} ")->queryAll();

            foreach ($sells as $invoice){

                $clientType = Sales::CUSTOMER_TYPE_REGULAR;

                if($invoice['client_id']=='000' || $invoice['client_id']==''){
                    $clientId = $this->xyzClientId;
                    $clientType = Sales::CUSTOMER_TYPE_IRREGULAR;
                }else{
                    $clientId = (int) $invoice['client_id'];
                }

                $date =  new DateTime();
                $invoiceDate =  $date->setTimestamp($invoice['date'])->setTimezone($timezone)->format('Y-m-d H:i:s');

                $salesRows[] = [
                    'sales_id'=>(int) $invoice['id'],
                    'memo_id'=>null,
                    'client_id'=>$clientId,
                    'client_name'=>$this->trimCustomerName($invoice['client']),
                    'client_mobile'=>'880-000000000',
                    'client_type'=>$clientType,
                    'user_id'=>$this->userId,
                    'updated_by'=>$this->userId,
                    'contact_number'=>$invoice['phone']?$invoice['phone']:'+880-00000000',
                    'received_amount'=>(float) $invoice['paid'],
                    'reconciliation_amount'=>0,
                    'sales_return_amount'=>0,
                    'paid_amount'=>(float) $invoice['paid'],
                    'due_amount'=>(float) $invoice['due'],
                    'discount_amount'=>(float) $invoice['discount'],
                    'total_amount'=>(float) $invoice['total_amount'],
                    'remarks'=>self::REMARKS_COMMENT.' '.$invoice['discountremarks'],
                    'type'=>Sales::TYPE_SALES,
                    'payment_type'=>$this->paymentTypeCash,
                    'bank'=>0,
                    'branch'=>0,
                    'transport_id'=>0,
                    'transport_name'=>0,
                    'tracking_number'=>0,
                    'status'=>Sales::STATUS_APPROVED,
                    'created_at'=>$invoiceDate,
                    'updated_at'=>date('Y-m-d H:i:s'),
                ];

                $customerAccount[]=[
                    'id'=>null,
                    'sales_id'=>(int)$invoice['id'],
                    'memo_id'=>null,
                    'client_id'=>$clientId,
                    'type'=>CustomerAccount::TYPE_SALES,
                    'payment_type'=>CustomerAccount::PAYMENT_TYPE_NA,
                    'payment_history_id'=>null,
                    'account'=>CustomerAccount::ACCOUNT_RECEIVABLE,
                    'debit'=>(float) $invoice['total_amount'],
                    'credit'=>0,
                    'balance'=>(float) $invoice['total_amount'],
                    'date'=>date('Y-m-d H:i;s', $invoice['date']),
                ];

                if((int)$invoice['paid']>0){
                    $cashBookRows[] = [
                        'id'=>null,
                        'remarks'=>self::REMARKS_COMMENT,
                        'reference_id'=>(int) $invoice['id'],
                        'ref_user_id'=>(int) $this->userId,
                        'source'=>CashBook::SOURCE_SALES,
                        'cash_in'=>(float) $invoice['paid'],
                        'cash_out'=>0,
                        'created_at'=>$invoiceDate,
                        'updated_at'=>date('Y-m-d H:i:s'),
                    ];

                    $customerAccount[]=[
                        'id'=>null,
                        'sales_id'=>(int) $invoice['id'],
                        'memo_id'=>null,
                        'client_id'=>$clientId,
                        'type'=>CustomerAccount::TYPE_SALES,
                        'payment_type'=>CustomerAccount::PAYMENT_TYPE_CASH,
                        'payment_history_id'=>null,
                        'account'=>CustomerAccount::ACCOUNT_SALES,
                        'debit'=>0,
                        'credit'=>(float)$invoice['paid'],
                        'balance'=>(float) $invoice['total_amount'] - (float)$invoice['paid'],
                        'date'=>$invoiceDate,
                    ];

                }

            }


            echo '<br>'."Start Inserting Sales data to current table" . '<br>';
            Yii::$app->db->createCommand()->batchInsert(Sales::tableName(), $sales->attributes(), $salesRows)->execute();
            echo '<br>'."successfully inserted Sales table" . '<br>';

            echo '<br>'."Start Inserting CashBook data to current table" . '<br>';
            Yii::$app->db->createCommand()->batchInsert(CashBook::tableName(), $cash->attributes(), $cashBookRows)->execute();
            echo '<br>'."successfully inserted CashBook table" . '<br>';

            echo '<br>'."Start Inserting CashBook data to current table" . '<br>';
            Yii::$app->db->createCommand()->batchInsert(CustomerAccount::tableName(), $customer->attributes(), $customerAccount)->execute();
            echo '<br>'."successfully inserted CashBook table" . '<br>';


            $offset = $offset + $limit;
            //sleep(1);
        }

//        echo '<br>'."Start Inserting Sales data to current table" . '<br>';
//        Yii::$app->db->createCommand()->batchInsert(Sales::tableName(), $sales->attributes(), $salesRows)->execute();
//        echo '<br>'."successfully inserted Sales table" . '<br>';
//
//        echo '<br>'."Start Inserting CashBook data to current table" . '<br>';
//        Yii::$app->db->createCommand()->batchInsert(CashBook::tableName(), $cash->attributes(), $cashBookRows)->execute();
//        echo '<br>'."successfully inserted CashBook table" . '<br>';
//
//        echo '<br>'."Start Inserting CashBook data to current table" . '<br>';
//        Yii::$app->db->createCommand()->batchInsert(CustomerAccount::tableName(), $customer->attributes(), $customerAccount)->execute();
//        echo '<br>'."successfully inserted CashBook table" . '<br>';


    }

    public function salesInvoiceDetails()
    {
        $offset = 0;
        $limit = 1000;

        $totalRecords = 0;
        $salesDetailsRows = [];
        echo '<br>'."Start Sales Items  Importing".'<br>';

        $record = Yii::$app->db2->createCommand("SELECT count( id ) AS total FROM asm_sells_item")->queryAll();
        $totalRecords = $record[0]['total'];

        $salesDetails = new SalesDetails();

        while($totalRecords>$offset){

            echo '<br>'."Query all Sales Items data from old database limit {$offset}, {$limit}".'<br>';
            $sells = Yii::$app->db2->createCommand("SELECT * FROM asm_sells_item LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($sells as $invoice){
                $salesDetailsRows[] = [
                    'sales_details_id'=>null,
                    'sales_id'=>(int)$invoice['invoice_id'],
                    'item_id'=>(int)$invoice['item_id'],
                    'brand_id'=>(int)$invoice['brand_id'],
                    'size_id'=>(int)$invoice['size_id'],
                    'unit'=>$invoice['unit'],
                    'cost_amount'=>$invoice['cost']?(float)$invoice['cost']:0,
                    'sales_amount'=>(float)$invoice['price'],
                    'total_amount'=>(float)$invoice['total'],
                    'quantity'=>(float)$invoice['quentity'],
                    'challan_unit'=>strtoupper($invoice['unit']),
                    'challan_quantity'=>0,
                    'status'=>SalesDetails::STATUS_APPROVED,
                ];
            }

//            Utility::debug($salesDetailsRows[579], false);
//            Utility::debug($salesDetailsRows[580]);

            if(count($salesDetailsRows)>0){
                echo '<br>'."Start Inserting Sales Items data to current table" . '<br>';
                Yii::$app->db->createCommand()->batchInsert(SalesDetails::tableName(), $salesDetails->attributes(), $salesDetailsRows)->execute();
                echo '<br>'."successfully inserted Sales Items table" . '<br>';
                $salesDetailsRows = [];
            }

            $offset = $offset + $limit;
        }

        echo '<br>'."Start Inserting Sales Items data to current table" . '<br>';
        Yii::$app->db->createCommand()->batchInsert(SalesDetails::tableName(), $salesDetails->attributes(), $salesDetailsRows)->execute();
        echo '<br>'."successfully inserted Sales Items table" . '<br>';
        $salesDetailsRows = [];
    }

    private function getLcIds()
    {
        $name = 'Migration';
        $model = Lc::find()->where(['lc_name'=>$name])->one();
        if($model){
            return $model->lc_id;
        }else{
            $model = new Lc();
            $model->lc_name = $name;
            if($model->save()){
                return $model->lc_id;
            }
        }
    }

    private function getLcPaymentIds()
    {
        $name = 'Migration';
        $model = LcPaymentType::find()->where(['lc_payment_type_name'=>$name])->one();
        if($model){
            return $model->lc_payment_type_id;
        }else{
            $model = new LcPaymentType();
            $model->lc_payment_type_name = $name;
            $model->lc_payment_type_status = LcPaymentType::ACTIVE;
            if($model->save()){
                return $model->lc_payment_type_id;
            }
        }
    }

    private function getWarehouseIds()
    {

        $name = 'Migration';
        $model = Warehouse::find()->where(['warehouse_name'=>$name])->one();
        if($model){
            return $model->warehouse_id;
        }else{
            $city = City::find()->one();
            $model = new Warehouse();
            $model->warehouse_name = $name;
            $model->city = $city->city_id;
            $model->address1 = 'Migration';
            $model->address2 = 'Migration';
            $model->postal_code = 4100;
            if($model->save()){
                return $model->warehouse_id;
            }
        }
    }

    public function expense()
    {
        $offset = 0;
        $limit = 1000;
        $totalRecords = 0;

        $sourceList = [
            'LC'=>Expense::SOURCE_EXTERNAL,
            'Warehouse'=>Expense::SOURCE_EXTERNAL,
            'Other'=>Expense::SOURCE_INTERNAL,
            'Transport'=>Expense::SOURCE_INTERNAL,
            'Entertainment'=>Expense::SOURCE_INTERNAL,
            'Labour'=>Expense::SOURCE_INTERNAL,
        ];

        $list = [
            'LC'=>1,
            'Warehouse'=>2,
            'Other'=>6,
            'Transport'=>7,
            'Entertainment'=>8,
            'Labour'=>9,
        ];

        $expense = [];
        $timezone = new DateTimeZone('Asia/Dhaka');
        echo '<br>'."Start Expense Importing".'<br>';


        $record = Yii::$app->db2->createCommand("SELECT count(id) AS total FROM asm_expense")->queryAll();
        $totalRecords = $record[0]['total'];
        $model = new Expense();

        while($totalRecords>$offset){

            echo '<br>'."Query all Expense data from old database limit {$offset}, {$limit}".'<br>';
            $records = Yii::$app->db2->createCommand("SELECT * FROM asm_expense LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($records as $record){

                $date =  new DateTime();
                $invoiceDate =  $date->setTimestamp($record['date'])->setTimezone($timezone)->format('Y-m-d H:i:s');
                $amount = (float) $record['amount'];
                $refId = null;


                if(isset($list[$record['expense']])){
                    $expenseName = $record['expense'];
                    $expenseId = $list[$record['expense']];
                }else{
                    $expenseName = 'Other';
                    $expenseId = $list['Other'];
                }

                if($expenseName=='LC'){

                    $lcPayment = new LcPayment();
                    $lcPayment->lc_id = $this->getLcIds();
                    $lcPayment->lc_payment_type = $this->getLcPaymentIds();
                    $lcPayment->user_id = Yii::$app->user->getId();
                    $lcPayment->updated_by = Yii::$app->user->getId();
                    $lcPayment->amount = $amount;
                    $lcPayment->payment_type = $this->paymentTypeCash;
                    $lcPayment->remarks = 'Migration';
                    $lcPayment->status = LcPayment::STATUS_APPROVED;
                    $lcPayment->extra = Json::encode(['bank_id'=>null, 'branch_id'=>null]);;
                    $lcPayment->created_at = $invoiceDate;
                    $lcPayment->updated_at = date('Y-m-d H:i:s');
                    if($lcPayment->save()){
                        $refId = $lcPayment->lc_payment_id;
                    }

                    $source = Expense::SOURCE_EXTERNAL;

                }elseif ($expenseName=='Warehouse'){

                    $warehousePayment = new WarehousePayment();
                    $warehousePayment->warehouse_id = $this->getWarehouseIds();
                    $warehousePayment->payment_amount = $amount;
                    $warehousePayment->payment_type = $this->paymentTypeCash;
                    $warehousePayment->month = 9;
                    $warehousePayment->year = 2010;
                    $warehousePayment->user_id = Yii::$app->user->getId();
                    $warehousePayment->updated_by = Yii::$app->user->getId();
                    $warehousePayment->remarks = 'Migration';
                    $warehousePayment->status = LcPayment::STATUS_APPROVED;
                    $warehousePayment->extra = Json::encode(['bank_id'=>null, 'branch_id'=>null]);;
                    $warehousePayment->created_at = $invoiceDate;
                    $warehousePayment->updated_at = date('Y-m-d H:i:s');
                    if($warehousePayment->save()){
                        $refId = $warehousePayment->id;
                    }

                    $source = Expense::SOURCE_EXTERNAL;

                }else{
                    $source = Expense::SOURCE_INTERNAL;
                }


                if($amount>0){
                    $expense[] = [
                        'expense_id'=>null,
                        'expense_type_id'=>(int) $expenseId,
                        'type'=>Expense::TYPE_CASH,
                        'ref_if'=>$refId,
                        'user_id'=>Yii::$app->user->getId(),
                        'updated_by'=>Yii::$app->user->getId(),
                        'expense_amount'=>$amount,
                        'expense_remarks'=> $expenseName,
                        'status'=>Expense::STATUS_APPROVED,
                        'extra'=>Json::encode(['bank_id'=>null, 'branch_id'=>null]),
                        'source'=>$source,
                        'created_at'=>$invoiceDate,
                        'updated_at'=>date('Y-m-d H:i:s'),
                    ];
                }


            }



            if(count($expense)>0){
                $model = new Expense();
                echo '<br>'."Start Inserting Expense data to current table" . '<br>';
                Yii::$app->db->createCommand()->batchInsert(Expense::tableName(), $model->attributes(), $expense)->execute();
                echo '<br>'."successfully inserted Expense table" . '<br>';
                $expense = [];
            }

            $offset = $offset + $limit;
        }

        $model = new Expense();
        echo '<br>'."Start Inserting Expense data to current table" . '<br>';
        Yii::$app->db->createCommand()->batchInsert(Expense::tableName(), $model->attributes(), $expense)->execute();
        echo '<br>'."successfully inserted Expense table" . '<br>';
        $expense = [];


        $offset = 0;
        $rows = [];

        $totalRecords = Expense::find()->where(['status'=>Expense::STATUS_APPROVED])->count();
        $model = new CashBook();

        while($totalRecords>$offset) {
            echo '<br>' . "Query all Expense Out database limit {$offset}, {$limit}" . '<br>';
            //$records = Yii::$app->db2->createCommand("SELECT * FROM asm_income WHERE remarks='Due Received' LIMIT {$offset}, {$limit}")->queryAll();
            $records = Expense::find()->where(['status'=>Expense::STATUS_APPROVED])->offset($offset)->limit($limit)->all();

            $rows = [];

            foreach ($records as $record) {
                $amount = $record->expense_amount;
                if ($amount > 0) {
                    $rows[] = [
                        'id' => null,
                        'remarks' => 'Migration: '.$record->expense_remarks,
                        'reference_id' => $record->ref_id==null?$record->expense_id:$record->ref_id,
                        'ref_user_id' => Yii::$app->user->getId(),
                        'source' => $record->expenseType->expense_type_name,
                        'cash_in' => 0,
                        'cash_out' => $amount,
                        'created_at' => $record->created_at,
                        'updated_at' => date('Y-m-d H:i:s'),
                    ];
                }
            }

            if (count($rows) > 0) {
                echo '<br>' . "Start Inserting Cash Book  data to current table" . '<br>';
                Yii::$app->db->createCommand()->batchInsert(CashBook::tableName(), $model->attributes(), $rows)->execute();
                echo '<br>' . "successfully inserted Cash Book table" . '<br>';
            }

            $offset = $offset + $limit;
        }

        if (count($rows) > 0) {
            echo '<br>' . "Start Inserting Cash Book  data to current table" . '<br>';
            Yii::$app->db->createCommand()->batchInsert(CashBook::tableName(), $model->attributes(), $rows)->execute();
            echo '<br>' . "successfully inserted Cash Book table" . '<br>';
        }

    }

    public function cashHandReceived()
    {
        $offset = 0;
        $limit = 1000;


        $totalRecords = 0;
        $cashHandReceived = [];
        $timezone = new DateTimeZone('Asia/Dhaka');
        echo '<br>'."Start Cash Hand Received Importing".'<br>';


        $record = Yii::$app->db2->createCommand("SELECT count(id) AS total FROM asm_income WHERE client='Cash Hand Received'")->queryAll();
        $totalRecords = $record[0]['total'];

        $model = new CashHandReceived();

        while($totalRecords>$offset){

            echo '<br>'."Query all Cash Hand Received data from old database limit {$offset}, {$limit}".'<br>';
            $cashRecords = Yii::$app->db2->createCommand("SELECT * FROM asm_income WHERE client='Cash Hand Received' LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($cashRecords as $cashRecord){

                $date =  new DateTime();
                $invoiceDate =  $date->setTimestamp($cashRecord['date'])->setTimezone($timezone)->format('Y-m-d H:i:s');

                $amount = (float) $cashRecord['amount'];

                if($amount>0){
                    $cashHandReceived[] = [
                        'id'=>null,
                        'user_id'=>Yii::$app->user->getId(),
                        'received_amount'=>$amount,
                        'remarks'=>$cashRecord['remarks'],
                        'status'=>CashHandReceived::STATUS_APPROVED,
                        'created_at'=>$invoiceDate,
                        'updated_at'=>date('Y-m-d H:i:s'),
                    ];
                }
            }

            if(count($cashHandReceived)>0){

                echo '<br>'."Start Inserting CashHandReceived Items data to current table" . '<br>';
                Yii::$app->db->createCommand()->batchInsert(CashHandReceived::tableName(), $model->attributes(), $cashHandReceived)->execute();
                echo '<br>'."successfully inserted CashHandReceived Items table" . '<br>';
                $cashHandReceived = [];
            }

            $offset = $offset + $limit;
        }

        if(count($cashHandReceived)>0){
            echo '<br>'."Start Inserting CashHandReceived Items data to current table" . '<br>';
            Yii::$app->db->createCommand()->batchInsert(CashHandReceived::tableName(), $model->attributes(), $cashHandReceived)->execute();
            echo '<br>'."successfully inserted CashHandReceived Items table" . '<br>';
            $cashHandReceived = [];
        }


        $offset = 0;
        $rows = [];

        $totalRecords = CashHandReceived::find()->where(['status'=>CashHandReceived::STATUS_APPROVED])->count();
        $model = new CashBook();

        while($totalRecords>$offset) {
            echo '<br>' . "Query all Cash Hand Received data from old database limit {$offset}, {$limit}" . '<br>';
            //$records = Yii::$app->db2->createCommand("SELECT * FROM asm_income WHERE remarks='Due Received' LIMIT {$offset}, {$limit}")->queryAll();
            $records = CashHandReceived::find()->where(['status'=>CashHandReceived::STATUS_APPROVED])->offset($offset)->limit($limit)->all();

            foreach ($records as $record) {
                $amount = $record->received_amount;
                if ($amount > 0) {
                    $rows[] = [
                        'id' => null,
                        'remarks' => 'Migration: '.$record->remarks,
                        'reference_id' => $record->id,
                        'ref_user_id' => Yii::$app->user->getId(),
                        'source' => CashBook::SOURCE_CASH_HAND_RECEIVED,
                        'cash_in' => $amount,
                        'cash_out' => 0,
                        'created_at' => $record->created_at,
                        'updated_at' => date('Y-m-d H:i:s'),
                    ];
                }
            }

            if (count($rows) > 0) {
                echo '<br>' . "Start Inserting Cash Book  data to current table" . '<br>';
                Yii::$app->db->createCommand()->batchInsert(CashBook::tableName(), $model->attributes(), $rows)->execute();
                echo '<br>' . "successfully inserted Cash Book table" . '<br>';
                $rows = [];
            }

            $offset = $offset + $limit;
        }


        if (count($rows) > 0) {
            echo '<br>' . "Start Inserting Cash Book  data to current table" . '<br>';
            Yii::$app->db->createCommand()->batchInsert(CashBook::tableName(), $model->attributes(), $rows)->execute();
            echo '<br>' . "successfully inserted Cash Book table" . '<br>';
            $rows = [];
        }



    }

    public function withdraw()
    {
        $offset = 0;
        $limit = 1000;

        $withdrawReceived = [];
        $timezone = new DateTimeZone('Asia/Dhaka');
        echo '<br>'."Start Cash Out Importing".'<br>';

        $model = new Withdraw();
        $record = Yii::$app->db2->createCommand("SELECT count(id) AS total FROM asm_withdraw")->queryAll();
        $totalRecords = $record[0]['total'];

        while($totalRecords>$offset){

            echo '<br>'."Query all Cash Hand Received data from old database limit {$offset}, {$limit}".'<br>';
            $withdrawRecords = Yii::$app->db2->createCommand("SELECT * FROM asm_withdraw LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($withdrawRecords as $withdrawRecord){

                $date =  new DateTime();
                $invoiceDate =  $date->setTimestamp($withdrawRecord['date'])->setTimezone($timezone)->format('Y-m-d H:i:s');

                $amount = (float) $withdrawRecord['amount'];

                if($amount>0){
                    $withdrawReceived[] = [
                        'id'=>null,
                        'user_id'=>Yii::$app->user->getId(),
                        'withdraw_amount'=>$amount,
                        'remarks'=>$withdrawRecord['bank'],
                        'type'=>Withdraw::TYPE_CASH,
                        'bank_id'=>null,
                        'branch_id'=>null,
                        'status'=>Withdraw::STATUS_APPROVED,
                        'created_at'=>$invoiceDate,
                        'updated_at'=>date('Y-m-d H:i:s'),
                    ];
                }
            }

            if(count($withdrawReceived)>0){
                echo '<br>'."Start Inserting Withdraw data to current table" . '<br>';
                Yii::$app->db->createCommand()->batchInsert(Withdraw::tableName(), $model->attributes(), $withdrawReceived)->execute();
                echo '<br>'."successfully inserted Withdraw table" . '<br>';
                $withdrawReceived = [];
            }

            $offset = $offset + $limit;
        }

        if(count($withdrawReceived)>0){
            echo '<br>'."Start Inserting Withdraw data to current table" . '<br>';
            Yii::$app->db->createCommand()->batchInsert(Withdraw::tableName(), $model->attributes(), $withdrawReceived)->execute();
            echo '<br>'."successfully inserted Withdraw table" . '<br>';
            $withdrawReceived = [];
        }



        $offset = 0;
        $rows = [];

        $totalRecords = Withdraw::find()->where(['status'=>Withdraw::STATUS_APPROVED])->count();
        $model = new CashBook();

        while($totalRecords>$offset) {
            echo '<br>' . "Query all Cash Hand Received data from old database limit {$offset}, {$limit}" . '<br>';
            //$records = Yii::$app->db2->createCommand("SELECT * FROM asm_income WHERE remarks='Due Received' LIMIT {$offset}, {$limit}")->queryAll();
            $records = Withdraw::find()->where(['status'=>Withdraw::STATUS_APPROVED])->offset($offset)->limit($limit)->all();

            foreach ($records as $record) {
                $amount = $record->withdraw_amount;
                if ($amount > 0) {
                    $rows[] = [
                        'id' => null,
                        'remarks' => 'Migration: '.$record->remarks,
                        'reference_id' => $record->id,
                        'ref_user_id' => Yii::$app->user->getId(),
                        'source' => CashBook::SOURCE_WITHDRAW,
                        'cash_in' => 0,
                        'cash_out' => $amount,
                        'created_at' => $record->created_at,
                        'updated_at' => date('Y-m-d H:i:s'),
                    ];
                }
            }

            if (count($rows) > 0) {
                echo '<br>' . "Start Inserting Cash Book  data to current table" . '<br>';
                Yii::$app->db->createCommand()->batchInsert(CashBook::tableName(), $model->attributes(), $rows)->execute();
                echo '<br>' . "successfully inserted Cash Book table" . '<br>';
                $rows = [];
            }

            $offset = $offset + $limit;
        }


        if (count($rows) > 0) {
            echo '<br>' . "Start Inserting Cash Book  data to current table" . '<br>';
            Yii::$app->db->createCommand()->batchInsert(CashBook::tableName(), $model->attributes(), $rows)->execute();
            echo '<br>' . "successfully inserted Cash Book table" . '<br>';
            $rows = [];
        }



    }

    public function ProductUnit()
    {
        $rows = [];

        echo '<br>'."Product Unit adding".'<br>';
        echo "Query all unit list from old table".'<br>';
        $unit = Yii::$app->db2->createCommand("SELECT DISTINCT(unit)FROM asm_sells_item")->queryAll();
        foreach($unit as $index=>$data)
        {
            $rows[] = [
                'id'=>$index+1,
                'name'=>strtoupper($data['unit']),
                'status'=>ProductUnit::STATUS_ACTIVE
            ];
        }


        $productUnit = new ProductUnit();
        echo "Start Inserting Unit to current table".'<br>';
        Yii::$app->db->createCommand()->batchInsert(ProductUnit::tableName(), $productUnit->attributes(), $rows)->execute();
        echo "successfully inserted uni".'<br>';

        echo '<br>'."Product Unit added".'<br>';
    }

//    public function actionInit()
//    {
//        //Required Init for all applcition.
//        DBUtility::dropAll();
//        $this->ImportSchema();
//        $this->Role();
//        $this->User();
//        //end
//
//        //$this->oldDBClean();
//        ################ Migration Scripting for Afsar Traders ################
//        $this->MigrateDB();
//    }

    public function dueReceivedByCash()
    {
        $paymentTypeId = 1; //Check New Database {PaymentType} Table, Where Type Is Cash.
        $timezone = new DateTimeZone('Asia/Dhaka');
        $rows = [];
        $limit = 1000;

        $offset = 0;
        $rows = [];
        $timezone = new DateTimeZone('Asia/Dhaka');
        echo '<br>'."Start Cash Received Of Due Importing".'<br>';

        $record = Yii::$app->db2->createCommand("SELECT count(id) AS total FROM asm_income WHERE remarks='Due Received'")->queryAll();
        $model = new ClientPaymentHistory();
        $totalRecords = $record[0]['total'];

        while($totalRecords>$offset){

            echo '<br>'."Query all Cash Hand Received data from old database limit {$offset}, {$limit}".'<br>';
            $records = Yii::$app->db2->createCommand("SELECT * FROM asm_income WHERE remarks='Due Received' LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($records as $record){

                $dateTime =  new DateTime();
                $date =  $dateTime->setTimestamp($record['date'])->setTimezone($timezone)->format('Y-m-d H:i:s');

                $amount = (float) trim($record['amount']);
                $clientId = (int) trim($record['clientid']);

                if($amount>0){
                    $rows[] = [
                        'customer_payment_history_id'=>null,
                        'client_id'=>$clientId,
                        'user_id'=>Yii::$app->user->getId(),
                        'updated_by'=>Yii::$app->user->getId(),
                        'sales_id'=>null,
                        'received_amount'=>$amount,
                        'remaining_amount'=>$amount,
                        'remarks'=>'Migration',
                        'received_type'=>ClientPaymentHistory::RECEIVED_TYPE_DUE_RECEIVED,
                        'extra'=>Json::encode(['bank_id'=>null, 'branch_id'=>null]),
                        'received_at'=>$date,
                        'updated_at'=>date('Y-m-d H:i:s'),
                        'payment_type_id'=>$paymentTypeId,
                        'status'=>ClientPaymentHistory::STATUS_APPROVED,
                    ];
                }
            }

            if(count($rows)>0){
                echo '<br>'."Start Inserting Cash Due Received data to current table" . '<br>';
                Yii::$app->db->createCommand()->batchInsert(ClientPaymentHistory::tableName(), $model->attributes(), $rows)->execute();
                echo '<br>'."successfully inserted Cash Due Received table" . '<br>';
                $rows = [];
            }

            $offset = $offset + $limit;
        }

        if(count($rows)>0){
            echo '<br>'."Start Inserting Cash Due Received data to current table" . '<br>';
            Yii::$app->db->createCommand()->batchInsert(ClientPaymentHistory::tableName(), $model->attributes(), $rows)->execute();
            echo '<br>'."successfully inserted Cash Due Received table" . '<br>';
        }




        $offset = 0;
        $rows = [];

        $model = new CashBook();
        $totalRecords = ClientPaymentHistory::find()->where(['payment_type_id'=>$paymentTypeId])->count();

        while($totalRecords>$offset) {
            echo '<br>' . "Query all Cash Hand Received data from old database limit {$offset}, {$limit}" . '<br>';
            //$records = Yii::$app->db2->createCommand("SELECT * FROM asm_income WHERE remarks='Due Received' LIMIT {$offset}, {$limit}")->queryAll();
            $records = ClientPaymentHistory::find()->where(['payment_type_id'=>$paymentTypeId])->offset($offset)->limit($limit)->all();

            foreach ($records as $record) {

                $amount = $record->received_amount;
                if ($amount > 0) {
                    $rows[] = [
                        'id' => null,
                        'remarks' => 'Migration',
                        'reference_id' => $record->client_payment_history_id,
                        'ref_user_id' => Yii::$app->user->getId(),
                        'source' => CashBook::SOURCE_DUE_RECEIVED,
                        'cash_in' => $record->received_amount,
                        'cash_out' => 0,
                        'created_at' => $record->received_at,
                        'updated_at' => date('Y-m-d H:i:s'),
                    ];
                }
            }

            if (count($rows) > 0) {
                echo '<br>' . "Start Inserting Cash Book  data to current table" . '<br>';
                Yii::$app->db->createCommand()->batchInsert(CashBook::tableName(), $model->attributes(), $rows)->execute();
                echo '<br>' . "successfully inserted Cash Book table" . '<br>';
                $rows = [];
            }

            $offset = $offset + $limit;
        }

        if(count($rows)>0) {

            echo '<br>' . "Start Inserting Cash Book  data to current table" . '<br>';
            Yii::$app->db->createCommand()->batchInsert(CashBook::tableName(), $model->attributes(), $rows)->execute();
            echo '<br>' . "successfully inserted Cash Book table" . '<br>';
            $rows = [];
        }

    }

    private function getBankId()
    {
        $name = 'Migration';

        $model = Bank::find()->where(['bank_name'=>$name])->one();

        if($model){
            return $model->bank_id;
        }else{
            $model = new Bank();
            $model->bank_name = $name;
            if($model->save()){
                return $model->bank_id;
            }
        }
    }

    private function getBranchId()
    {
        $bankId = $this->getBankId();

        $name = 'Migration';
        $model = Branch::find()->where(['branch_name'=>$name, 'bank_id'=>$bankId])->one();
        if($model){
            return $model->branch_id;
        }else{
            $model = new Branch();
            $model->branch_name = $name;
            $model->bank_id = $bankId;
            if($model->save()){
                return $model->branch_id;
            }
        }
    }

    public function bankDueReceived()
    {
        $bankId =  $this->getBankId();

        $branchId = $this->getBranchId();

        $paymentTypeId = 2; //Check New Database {PaymentType} Table, Where Type Is Bank.
        $timezone = new DateTimeZone('Asia/Dhaka');
        $rows = [];
        $limit = 1000;

        $offset = 0;
        $rows = [];
        $timezone = new DateTimeZone('Asia/Dhaka');
        echo '<br>'."Start Cash Received Of Due Importing".'<br>';

        $record = Yii::$app->db2->createCommand("SELECT count(id) AS total FROM asm_deposite")->queryAll();
        $model = new ClientPaymentHistory();
        $totalRecords = $record[0]['total'];

        while($totalRecords>$offset){

            echo '<br>'."Query all Cash Hand Received data from old database limit {$offset}, {$limit}".'<br>';
            $records = Yii::$app->db2->createCommand("SELECT * FROM asm_deposite LIMIT {$offset}, {$limit}")->queryAll();

            foreach ($records as $record){

                $dateTime =  new DateTime();
                $date =  $dateTime->setTimestamp($record['date'])->setTimezone($timezone)->format('Y-m-d H:i:s');

                $clientId = (int) trim($record['clientid']);
                $amount = (float) trim($record['amount']);
                $bank = $this->getBankId();
                $branch = $this->getBranchId();
                $paymentType = trim($record['payment_type']);

                if($amount>0){
                    $rows[] = [
                        'customer_payment_history_id'=>null,
                        'client_id'=>$clientId,
                        'user_id'=>Yii::$app->user->getId(),
                        'updated_by'=>Yii::$app->user->getId(),
                        'sales_id'=>null,
                        'received_amount'=>$amount,
                        'remaining_amount'=>$amount,
                        'remarks'=>'Migration - '.$paymentType,
                        'received_type'=>ClientPaymentHistory::RECEIVED_TYPE_DUE_RECEIVED,
                        'extra'=>Json::encode(['bank_id'=>$bank, 'branch_id'=>$branch]),
                        'received_at'=>$date,
                        'updated_at'=>date('Y-m-d H:i:s'),
                        'payment_type_id'=>$paymentTypeId,
                        'status'=>ClientPaymentHistory::STATUS_APPROVED,
                    ];
                }
            }

            if(count($rows)>0){
                echo '<br>'."Start Inserting Bank Due Received data to current table" . '<br>';
                Yii::$app->db->createCommand()->batchInsert(ClientPaymentHistory::tableName(), $model->attributes(), $rows)->execute();
                echo '<br>'."successfully inserted Bank Due Received table" . '<br>';
                $rows = [];
            }

            $offset = $offset + $limit;
        }

        echo '<br>'."Start Inserting Bank Received data to current table" . '<br>';
        Yii::$app->db->createCommand()->batchInsert(ClientPaymentHistory::tableName(), $model->attributes(), $rows)->execute();
        echo '<br>'."successfully inserted Bank Due Received table" . '<br>';
        $rows = [];



        $offset = 0;
        $rows = [];

        $model = new DepositBook();
        $totalRecords = ClientPaymentHistory::find()->where(['payment_type_id'=>$paymentTypeId])->count();

        while($totalRecords>$offset) {
            echo '<br>' . "Query all Cash Hand Received data from old database limit {$offset}, {$limit}" . '<br>';
            //$records = Yii::$app->db2->createCommand("SELECT * FROM asm_income WHERE remarks='Due Received' LIMIT {$offset}, {$limit}")->queryAll();
            $records = ClientPaymentHistory::find()->where(['payment_type_id'=>$paymentTypeId])->offset($offset)->limit($limit)->all();

            foreach ($records as $record) {
                $json = Json::decode($record->extra);
                $remarks = $record->remarks.' Bank: '.$json['bank_id'].' Branch: '.$json['branch_id'];
                $amount = $record->received_amount;
                if ($amount > 0) {
                    $rows[] = [
                        'id' => null,
                        'bank_id' => $bankId,
                        'branch_id' => $branchId,
                        'payment_type_id' => $paymentTypeId,
                        'ref_user_id' => Yii::$app->user->getId(),
                        'deposit_in' => $record->received_amount,
                        'deposit_out' => 0,
                        'reference_id' => $record->client_payment_history_id,
                        'source' => DepositBook::SOURCE_DUE_RECEIVED,
                        'remarks' => $remarks,
                        'created_at' => $record->received_at,
                        'updated_at' => date('Y-m-d H:i:s'),
                    ];
                }
            }

            if (count($rows) > 0) {
                echo '<br>' . "Start Inserting Cash Book  data to current table" . '<br>';
                Yii::$app->db->createCommand()->batchInsert(DepositBook::tableName(), $model->attributes(), $rows)->execute();
                echo '<br>' . "successfully inserted Cash Book table" . '<br>';
                $rows = [];
            }

            $offset = $offset + $limit;
        }

        if(count($rows)>0) {

            echo '<br>' . "Start Inserting Deposit Book  data to current table" . '<br>';
            Yii::$app->db->createCommand()->batchInsert(DepositBook::tableName(), $model->attributes(), $rows)->execute();
            echo '<br>' . "successfully inserted Deposit Book table" . '<br>';
            $rows = [];
        }

    }

    private function processPayment(ClientPaymentHistory $model)
    {
        $hasError = false;
        $availableBalance = $model->remaining_amount;

        if($model->payType=='Manual') {
            $receivable = CustomerUtility::getDueInvoiceById($model->client_id, $model->invoices);
        }else{
            $receivable = CustomerUtility::getDueInvoicePrice($model->client_id);
        }

        $connection = Yii::$app->db;
        $transaction = $connection->beginTransaction();

        try {

            foreach($receivable as $account){

                $sales = Sales::find()->where(['sales_id'=>$account->sales_id])->one();

                if($account->due==$availableBalance){
                    //This Invoice due and available balance is same amount.
                    if($availableBalance>0){

                        $clientPaymentDetails = new ClientPaymentDetails();
                        $clientPaymentDetails->sales_id = $account->sales_id;
                        $clientPaymentDetails->client_id = $model->client_id;
                        $clientPaymentDetails->payment_history_id = $model->client_payment_history_id;
                        $clientPaymentDetails->paid_amount = $availableBalance;
                        $clientPaymentDetails->payment_type = ClientPaymentDetails::PAYMENT_TYPE_FULL;

                        if($clientPaymentDetails->save()){

                            $record = CustomerAccount::find()->where(['sales_id'=>$account->sales_id])->orderBy('id DESC')->one();

                            $customerAccount = new CustomerAccount();
                            $customerAccount->sales_id = $account->sales_id;
                            $customerAccount->memo_id = $sales->memo_id;
                            $customerAccount->client_id = $model->client_id;
                            $customerAccount->payment_history_id = $model->client_payment_history_id;
                            $customerAccount->type = CustomerAccount::TYPE_SALES;
                            $customerAccount->payment_type = $model->paymentType->type==PaymentType::TYPE_CASH?CustomerAccount::PAYMENT_TYPE_CASH:CustomerAccount::PAYMENT_TYPE_BANK;
                            $customerAccount->account = CustomerAccount::ACCOUNT_DUE_RECEIVED;
                            $customerAccount->debit = 0;
                            $customerAccount->credit = $clientPaymentDetails->paid_amount;
                            $customerAccount->balance = ($record->balance - $clientPaymentDetails->paid_amount);

                            if($customerAccount->save()){
                                $sales->received_amount +=$clientPaymentDetails->paid_amount;
                                if($sales->save()){
                                    $availableBalance-=$availableBalance;
                                }
                            }else{
                                $hasError = true;
                            }

                        }else{
                            $hasError = true;
                        }

                    }

                }else{
                    //available balance and due amount is same.

                    if($account->due>$availableBalance){
                        //Invoice due amount  is greater then available balance.

                        if($availableBalance>0){

                            $clientPaymentDetails = new ClientPaymentDetails();
                            $clientPaymentDetails->sales_id = $account->sales_id;
                            $clientPaymentDetails->client_id = $model->client_id;
                            $clientPaymentDetails->payment_history_id = $model->client_payment_history_id;
                            $clientPaymentDetails->paid_amount = $availableBalance;
                            $clientPaymentDetails->payment_type = ClientPaymentDetails::PAYMENT_TYPE_PARTIAL;

                            if($clientPaymentDetails->save()){

                                $record = CustomerAccount::find()->where(['sales_id'=>$account->sales_id])->orderBy('id DESC')->one();

                                $customerAccount = new CustomerAccount();
                                $customerAccount->sales_id = $account->sales_id;
                                $customerAccount->memo_id = $sales->memo_id;
                                $customerAccount->client_id = $model->client_id;
                                $customerAccount->payment_history_id = $model->client_payment_history_id;
                                $customerAccount->type = CustomerAccount::TYPE_SALES;
                                $customerAccount->payment_type = $model->paymentType->type==PaymentType::TYPE_CASH?CustomerAccount::PAYMENT_TYPE_CASH:CustomerAccount::PAYMENT_TYPE_BANK;
                                $customerAccount->account = CustomerAccount::ACCOUNT_DUE_RECEIVED;
                                $customerAccount->debit = 0;
                                $customerAccount->credit = $clientPaymentDetails->paid_amount;
                                $customerAccount->balance = ($record->balance - $clientPaymentDetails->paid_amount);

                                if($customerAccount->save()){

                                    $sales->received_amount +=$clientPaymentDetails->paid_amount;
                                    if($sales->save()){
                                        $availableBalance-=$availableBalance;
                                    }

                                }else{
                                    $hasError = true;
                                }

                            }else{
                                $hasError = true;
                            }

                        }

                    }else{
                        //Invoice Due amount is less then available balance
                        if($availableBalance>0){

                            $clientPaymentDetails = new ClientPaymentDetails();
                            $clientPaymentDetails->sales_id = $account->sales_id;
                            $clientPaymentDetails->client_id = $model->client_id;
                            $clientPaymentDetails->payment_history_id = $model->client_payment_history_id;
                            $clientPaymentDetails->paid_amount = $account->due;
                            $clientPaymentDetails->payment_type = ClientPaymentDetails::PAYMENT_TYPE_FULL;

                            if($clientPaymentDetails->save()){

                                $record = CustomerAccount::find()->where(['sales_id'=>$account->sales_id])->orderBy('id DESC')->one();

                                $customerAccount = new CustomerAccount();
                                $customerAccount->sales_id = $account->sales_id;
                                $customerAccount->memo_id = $sales->memo_id;
                                $customerAccount->client_id = $model->client_id;
                                $customerAccount->payment_history_id = $model->client_payment_history_id;
                                $customerAccount->type = CustomerAccount::TYPE_SALES;
                                $customerAccount->payment_type = $model->paymentType->type==PaymentType::TYPE_CASH?CustomerAccount::PAYMENT_TYPE_CASH:CustomerAccount::PAYMENT_TYPE_BANK;
                                $customerAccount->account = CustomerAccount::ACCOUNT_DUE_RECEIVED;
                                $customerAccount->debit = 0;
                                $customerAccount->credit = $clientPaymentDetails->paid_amount;
                                $customerAccount->balance = ($record->balance - $clientPaymentDetails->paid_amount);

                                if($customerAccount->save()){
                                    $sales->received_amount +=$clientPaymentDetails->paid_amount;
                                    if($sales->save()){
                                        $availableBalance-=$account->due;
                                    }
                                }else{
                                    $hasError = true;
                                }

                            }else{
                                $hasError = true;
                            }

                        }

                    }
                }
            }

            $model->remaining_amount = $availableBalance;

            if($model->save()){
                if(!$hasError){
                    $transaction->commit();
                    return true;
                }else{
                    $transaction->rollBack();
                    return false;
                }
            }else{
                $transaction->rollBack();
                return false;
            }

        } catch (\Exception $e) {
            $transaction->rollBack();
            throw $e;
        }
    }

    public function paymentAdjust()
    {

        $counter = 0;
        $offset = 0;
        $limit = 1;

        $clients = Client::find()->limit($limit)->offset($offset)->orderBy('client_id')->all();

        foreach ($clients as $client){

            $models = ClientPaymentHistory::find()
                ->with('customer')
                ->orderBy('received_at ASC')
                ->where(['status'=>ClientPaymentHistory::STATUS_APPROVED, 'client_id'=>$client->client_id])
                ->andWhere(['>', 'remaining_amount', 0])
                ->all();

            foreach ($models as $model){
                $model->payType = ClientPaymentHistory::PAY_TYPE_AUTO;
                $model->name = $model->customer->client_name;
                $this->processPayment($model);
                $counter++;
            }

            unset($models);
            unset($model);


            Utility::debug($counter, false);
            Utility::debug($client, false);

            gc_enable();
            gc_collect_cycles();
        }

    }

    public function cashSummery()
    {
        $isTrue = true;

        $start = "25-09-2010";

        while($isTrue){

            $date =  date('Y-m-d', strtotime("+1 day", strtotime($start)));

            $response = CashUtility::summery($date);

            $balance =  str_replace('.', '', str_replace(',', '', $response['balance']));

            if($balance<0){
                Utility::debug($response, false);
                Utility::debug($balance);
                $isTrue = false;
            }

            $start = $date;

        }

    }

    private function paymentDiffAsSales($amount, $clientId)
    {
        $itemId = $this->getItemIds();
        $brandId = $this->getBrandIds();
        $sizeId = $this->getSizeIds();

        $record = [
            'amount'=>$amount,
            'invoiceid'=>null,
            'clientid'=>$clientId,
        ];

        $this->createSales($record, $itemId, $brandId, $sizeId);

    }

    private function paymentDiff()
    {
        $rows = [];
        $dues  = [];
        $sales = [];
        $received = [];
        $salesReturn = [];


        $sql = "SELECT clientid, clientname, SUM(amount) as amount, SUM(due) as due, SUM(paid) as paid 
                FROM asm_client_account
                GROUP BY clientid";
        $records = Yii::$app->db2->createCommand($sql)->queryAll();
        foreach ($records as $record){
            $due = (int) $record['due'];
            if($due>0){
                $dues[(int)$record['clientid']] = $record;
            }
        }

        foreach ($dues as $id=>$data){

            $sql = "SELECT client_id, SUM(received_amount) as received_amount
                FROM client_payment_history
                WHERE client_id=$id
                GROUP BY client_id 
                ORDER BY client_id;";
            $records = Yii::$app->db->createCommand($sql)->queryAll();
            foreach ($records as $record){
                $received[(int)$record['client_id']] = ['received_amount'=>(float) $record['received_amount']];
            }

            $sql = "SELECT client_id, SUM(refund_amount) as refund_amount, SUM(cut_off_amount) as cut_off_amount,  SUM(total_amount) as total_amount
                FROM sales_return 
                WHERE client_id=$id
                GROUP BY client_id";
            $records = Yii::$app->db->createCommand($sql)->queryAll();
            foreach ($records as $record){
                $salesReturn[(int)$record['client_id']] = [
                    'refund_amount'=>(float) $record['refund_amount'],
                    'cut_off_amount'=>(float) $record['cut_off_amount'],
                    'total_amount'=>(float) $record['total_amount']
                ];
            }


            $sql = "SELECT client_id, 
                SUM(received_amount) as received_amount, 
                SUM(reconciliation_amount) as reconciliation_amount, 
                SUM(sales_return_amount) as sales_return_amount, 
                SUM(paid_amount) as paid_amount,
                SUM(due_amount) as due_amount, 
                SUM(discount_amount) as discount_amount, 
                SUM(total_amount) as total_amount
                FROM sales
                WHERE client_id=$id
                GROUP BY client_id 
                ORDER BY client_id;";
            $records = Yii::$app->db->createCommand($sql)->queryAll();
            foreach ($records as $record){
                $sales[(int)$record['client_id']] = $record;
            }

            $customerDuesOld = $data['due'];

            $cutOffAmount = isset($salesReturn[$id]['cut_off_amount'])?$salesReturn[$id]['cut_off_amount']:0;
            $totalAmount = isset($sales[$id]['total_amount'])?$sales[$id]['total_amount']:0;
            $receivedAmount = isset($received[$id]['received_amount'])?$received[$id]['received_amount']:0;
            $paidAmount = isset($sales[$id]['paid_amount'])?$sales[$id]['paid_amount']:0;

            $customerDuesNew = ($totalAmount - ($receivedAmount+$paidAmount+$cutOffAmount));

//            Utility::debug($customerDuesOld, false);
//            Utility::debug($customerDuesNew, false);
//            Utility::debug($sales, false);
//            Utility::debug($data, false);
//            Utility::debug($received, false);
//            Utility::debug($salesReturn, true);

            if($customerDuesNew>$customerDuesOld){
                $amount = ceil($customerDuesNew-$customerDuesOld);
                $rows[] = [
                    'customer_payment_history_id'=>null,
                    'client_id'=>$id,
                    'user_id'=>Yii::$app->user->getId(),
                    'updated_by'=>Yii::$app->user->getId(),
                    'sales_id'=>null,
                    'received_amount'=>$amount,
                    'remaining_amount'=>$amount,
                    'remarks'=>'Migration - '.'Manual Edit Adjustment',
                    'received_type'=>ClientPaymentHistory::RECEIVED_TYPE_DUE_RECEIVED,
                    'extra'=>Json::encode(['bank_id'=>$this->getBankId(), 'branch_id'=>$this->getBranchId()]),
                    'received_at'=>date('Y-m-d H:i:s'),
                    'updated_at'=>date('Y-m-d H:i:s'),
                    'payment_type_id'=>2,
                    'status'=>ClientPaymentHistory::STATUS_APPROVED,
                ];
            }else{
                if($customerDuesOld>$customerDuesNew){
                    $salesAmount = (float) ($customerDuesOld - $customerDuesNew);
                    $this->paymentDiffAsSales($salesAmount, $id);
                }
            }
        }

        if(count($rows)>0){
            $model = new ClientPaymentHistory();
            echo '<br>'."Start Inserting Bank Due Received data to current table" . '<br>';
            Yii::$app->db->createCommand()->batchInsert(ClientPaymentHistory::tableName(), $model->attributes(), $rows)->execute();
            echo '<br>'."successfully inserted Bank Due Received table" . '<br>';
        }

    }

    private function getItemIds()
    {
        $name = 'Migration';

        $items = Item::find()->where(['item_name'=>$name])->one();
        if($items){
            return $items->item_id;
        }else{
            $items = new Item();
            $items->item_name = $name;
            $items->product_status = Item::STATUS_ACTIVE;
            if($items->save()){
                return $items->item_id;
            }
        }
    }

    private function getBrandIds()
    {


        $brandMax = Brand::find()->orderBy('brand_id DESC')->one();

        $name = 'Migration';
        $brandNew = BrandNew::find()->where(['name'=>$name])->one();
        $brandNewId = null;
        $itemsIds = $this->getItemIds();

        if($brandNew){
            $brandNewId = $brandNew->id;
        }else{
            $brandMap = new BrandNew();
            $brandMap->id = ($brandMax->brand_id+1);
            $brandMap->name = 'Migration';
            $brandMap->status = BrandNew::STATUS_ACTIVE;
            $brandMap->extra = Json::encode([]);
            if($brandMap->save()){
                $brandNewId = $brandMap->id;
            }
        }

        $brand = Brand::find()->where(['brand_id'=>$brandNewId, 'item_id'=>$itemsIds])->one();

        if($brand){
            return $brand->brand_id;
        }else{
            $brand = new Brand();
            $brand->brand_name = $name;
            $brand->brand_status = Brand::STATUS_ACTIVE;
            $brand->brand_id = $brandNewId;
            $brand->item_id = $itemsIds;
            if($brand->save()){
                return $brandNewId;
            }
        }
    }

    private function getSizeIds()
    {
        $name = 'Migration';
        $itemsIds = $this->getItemIds();
        $brandIds = $this->getBranchId();

        $size = Size::find()->where(['size_name'=>$name,'item_id'=>$itemsIds, 'brand_id'=>$brandIds])->one();

        if($size) {
            return $size->size_id;
        }else{

            $size = new Size();
            $size->size_name = $name;
            $size->item_id = $itemsIds;
            $size->brand_id = $brandIds;
            $size->unit = 'PC';
            $size->unit_quantity = 10;
            $size->lowest_price = 10;
            $size->size_status = Size::STATUS_ACTIVE;
            if($size->save()){
                return $size->size_id;
            }

        }
    }

    private function oldDuesAsSales()
    {
        $itemId = $this->getItemIds();
        $brandId = $this->getBranchId();
        $sizeId = $this->getSizeIds();

        $sql = "SELECT * FROM asm_client_account WHERE CAST(amount AS SIGNED)>0 AND CAST(invoiceid AS SIGNED)<=1000";
        $records = Yii::$app->db2->createCommand($sql)->queryAll();

        foreach ($records as $record) {

            Utility::debug($record, false);
            $this->createSales($record, $itemId, $brandId, $sizeId);

        }
    }

    private function createSales($record, $itemId, $brandId, $sizeId, $remarks="Previous All Dues")
    {
        $date = null;

        if(isset($record['date']) && !empty($record['date'])){
            $timezone = new DateTimeZone(SystemSettings::getTimeZone());
            $dateTime = new DateTime($record['date']);
            $date = $dateTime->setTimezone($timezone)->format('Y-m-d H:i:s');
        }else{
            $timezone = new DateTimeZone(SystemSettings::getTimeZone());
            $dateTime = new DateTime();
            $date = $dateTime->setTimestamp($this->defaultTimeStamp)->setTimezone($timezone)->format('Y-m-d H:i:s');
        }

        $amount = (float)$record['amount'];
        $client = Client::findOne((int)$record['clientid']);

        if($record['invoiceid']!=null){
            $salesId = (int)$record['invoiceid'];
        }else{
            $salesId = $record['invoiceid'];
        }


        $model = new Sales();
        $model->sales_id = $salesId;
        $model->memo_id = null;
        $model->client_id = $client->client_id;
        $model->client_name = $client->client_name;
        $model->client_mobile = empty($client->client_contact_number)?'+880-000000':$client->client_contact_number;
        $model->client_type = 1;
        $model->contact_number = empty($client->client_contact_number)?'+880-000000':$client->client_contact_number;
        $model->user_id = Yii::$app->user->getId();
        $model->total_amount = (float)$record['amount'];
        $model->received_amount = 0;
        $model->reconciliation_amount = 0;
        $model->sales_return_amount = 0;
        $model->paid_amount = 0;
        $model->due_amount = $amount;
        $model->discount_amount = 0;
        $model->payment_type = CommonUtility::getPaymentTypeId(PaymentType::TYPE_CASH);
        $model->remarks = $remarks;
        $model->created_at = $date;
        $model->updated_at = $date;
        $model->status = Sales::STATUS_APPROVED;

        $transaction = Yii::$app->db->beginTransaction();
        try {
            if ($model->save()) {

                $salesDetails = new SalesDetails();
                $salesDetails->sales_id = $model->sales_id;
                $salesDetails->item_id = $itemId;
                $salesDetails->brand_id = $brandId;
                $salesDetails->size_id = $sizeId;
                $salesDetails->unit = 'PC';
                $salesDetails->cost_amount = $amount;
                $salesDetails->sales_amount = $amount;
                $salesDetails->total_amount = $amount;
                $salesDetails->quantity = 1;
                $salesDetails->challan_unit = 'PC';
                $salesDetails->challan_quantity = 1;
                $salesDetails->status = SalesDetails::STATUS_APPROVED;

                if ($salesDetails->save()) {

                    $customerAccount = new CustomerAccount();
                    $customerAccount->sales_id = $model->sales_id;
                    $customerAccount->memo_id = $model->memo_id;
                    $customerAccount->client_id = $model->client_id;
                    $customerAccount->type = CustomerAccount::TYPE_SALES;
                    $customerAccount->payment_history_id = null;
                    $customerAccount->account = CustomerAccount::ACCOUNT_RECEIVABLE;
                    $customerAccount->debit = ($model->total_amount - $model->discount_amount);
                    $customerAccount->credit = 0;
                    $customerAccount->balance = $customerAccount->debit;
                    $customerAccount->payment_type = CustomerAccount::PAYMENT_TYPE_NA;

                    if ($customerAccount->save()) {
                        $transaction->commit();
                    }else{
                        $transaction->rollBack();
                        Utility::debug($customerAccount->getErrors());
                    }

                } else {
                    Utility::debug($salesDetails->getErrors());
                    $transaction->rollBack();
                }
            }else{
                $transaction->rollBack();
                Utility::debug($model->getErrors());
            }
        } catch (\Exception $e) {
            $transaction->rollBack();
            throw $e;
        }

    }

    private function salesReturnApproved($id)
    {
        $hasError = false;
        $hasMessage = '';

        $model = SalesReturn::findOne($id);
        $model->setScenario('verify');
        $sales = Sales::find()->where(['sales_id' => $model->sales_id])->one();
        $salesReturnDetails = SalesReturnDetails::find()->where(['sales_return_id' => $model->sales_return_id])->all();

        $transaction = Yii::$app->db->beginTransaction();

        if ($model) {

            try {

                $productStatementRows = [];

                foreach ($salesReturnDetails as $product) {
                    $productStatementRows[] = [
                        'product_statement_id' => null,
                        'item_id' => $product->item_id,
                        'brand_id' => $product->brand_id,
                        'size_id' => $product->size_id,
                        'quantity' => $product->quantity,
                        'type' => ProductStatement::TYPE_SALES_RETURN,
                        'remarks' => $sales->remarks,
                        'reference_id' => $model->sales_return_id,
                        'user_id' => Yii::$app->user->getId(),
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated' => date('Y-m-d H:i:s')
                    ];
                }

                $productStatement = new ProductStatement();

                $productStatementInserted = Yii::$app->db->createCommand()->batchInsert(ProductStatement::tableName(), $productStatement->attributes(), $productStatementRows)->execute();

                if (count($productStatementRows) == $productStatementInserted) {

                    $accountCredit = 0;
                    $accountCreditBalance = 0;
                    $accountDebit = 0;
                    $accountDebitBalance = 0;

                    $totalInvoiceAmount = ($sales->total_amount - $sales->discount_amount);
                    $totalReceivedAmount =  ($sales->received_amount + $sales->sales_return_amount + $sales->reconciliation_amount);

                    if ($model->refund_amount > 0) {
                        $accountCredit = $model->refund_amount + $model->cut_off_amount;
                        $accountDebit = $model->refund_amount;
                        $accountCreditBalance = -1 * abs($model->refund_amount);
                    } else if ($model->cut_off_amount > 0) {
                        $accountCredit = $model->cut_off_amount;
                        $accountCreditBalance = (($totalInvoiceAmount - $totalReceivedAmount)-$accountCredit);
                    }


                    $customerAccountCredit = new CustomerAccount();
                    $customerAccountCredit->sales_id = $sales->sales_id;
                    $customerAccountCredit->memo_id = $sales->memo_id;

                    $customerAccountCredit->client_id = $sales->client_id;
                    $customerAccountCredit->type = CustomerAccount::TYPE_RETURN;
                    $customerAccountCredit->payment_type = CustomerAccount::PAYMENT_TYPE_NA;
                    $customerAccountCredit->account = CustomerAccount::ACCOUNT_SALES_RETURN;

                    $customerAccountCredit->debit = 0;
                    $customerAccountCredit->credit = $accountCredit;
                    $customerAccountCredit->balance = $accountCreditBalance;

                    if ($customerAccountCredit->save()) {

                        if ($model->refund_amount > 0) {
                            $customerAccountDebit = new CustomerAccount();
                            $customerAccountDebit->sales_id = $sales->sales_id;
                            $customerAccountDebit->memo_id = $sales->memo_id;

                            $customerAccountDebit->client_id = $sales->client_id;
                            $customerAccountDebit->type = CustomerAccount::TYPE_RETURN;
                            $customerAccountDebit->payment_type = CustomerAccount::PAYMENT_TYPE_NA;
                            $customerAccountDebit->account = CustomerAccount::ACCOUNT_ACCOUNT_DEPOSIT;

                            $customerAccountDebit->debit = $accountDebit;
                            $customerAccountDebit->credit = 0;
                            $customerAccountDebit->balance = $accountDebitBalance;
                            if ($customerAccountDebit->save()) {
                                $clientPaymentHistory = new ClientPaymentHistory();
                                $clientPaymentHistory->sales_id = $model->sales_id;
                                $clientPaymentHistory->client_id = $sales->client->client_id;
                                $clientPaymentHistory->user_id = Yii::$app->user->getId();
                                $clientPaymentHistory->received_type = ClientPaymentHistory::RECEIVED_TYPE_SALES_RETURN;
                                $clientPaymentHistory->received_amount = $model->refund_amount;
                                $clientPaymentHistory->remaining_amount = $model->refund_amount;
                                $clientPaymentHistory->remarks = $model->remarks;
                                $clientPaymentHistory->status = ClientPaymentHistory::STATUS_APPROVED;
                                $clientPaymentHistory->received_at =  date('Y-m-d H:i:s');
                                $clientPaymentHistory->updated_at =date('Y-m-d H:i:s');
                                $clientPaymentHistory->updated_by = $clientPaymentHistory->user_id;
                                $clientPaymentHistory->payment_type_id = PaymentType::TYPE_SALES_RETURN_ID;
                                if (!$clientPaymentHistory->save()) {
                                    $hasError = true;
                                    $hasMessage = ["Model"=>"$clientPaymentHistory", 'Errors'=>$clientPaymentHistory->getErrors()];
                                } else {
                                    $model->payment_history_id = $clientPaymentHistory->client_payment_history_id;
                                }
                            } else {
                                $hasMessage = ["Model"=>"$customerAccountDebit", 'Errors'=>$customerAccountDebit->getErrors()];
                                $hasError = true;
                            }
                        }

                        $sales->sales_return_amount += $accountCredit;
                        if ($sales->save()) {
                            $model->status = SalesReturn::STATUS_APPROVED;
                            $model->updated_by = Yii::$app->user->getId();
                            if (!$model->save()) {
                                $hasError = true;
                                $hasMessage = ["Model"=>"SalesReturn", 'Errors'=>$model->getErrors()];
                            }
                        } else {
                            $hasError = true;
                            $hasMessage = ["Model"=>"$sales", 'Errors'=>$sales->getErrors()];
                        }

                    } else {
                        $hasError = true;
                        Utility::debug($customerAccountCredit->getErrors());

                        $hasMessage = ["Model"=>"$sales", '$customerAccountCredit'=>$customerAccountCredit->getErrors()];
                    }
                }
            } catch (\Exception $e) {
                $hasError = true;
                throw $e;
                $hasMessage = ["Model"=>"Exception Block", 'Error'=>$e];
            }

            $response = [];

            if ($hasError) {
                $transaction->rollBack();
                $response =  ['status'=>'Has error found', 'Error' => true, "Details"=>$hasMessage];
            } else {
                $transaction->commit();
                $response = ['status' => 'Done', 'Error' => false];
            }


        }
    }

    private function loadReturnItems($salesId)
    {

        $models = SalesDetails::find()->where(['sales_id'=>$salesId])->all();

        foreach ($models as $model){
            $returnDraft = new ReturnDraft();
            $returnDraft->sales_id = $model->sales_id;
            $returnDraft->item_id = $model->item_id;
            $returnDraft->brand_id = $model->brand_id;
            $returnDraft->size_id = $model->size_id;
            $returnDraft->quantity = $model->quantity;
            $returnDraft->refund_amount = $model->sales_amount;
            $returnDraft->sales_amount = $model->sales_amount;
            $returnDraft->total_amount = ($returnDraft->refund_amount * $model->quantity);
            $returnDraft->user_id = Yii::$app->user->getId();
            if (!$returnDraft->save()) {
                Utility::debug($returnDraft->getErrors());
            }
        }

    }

    private function findSalesReturnInvoice()
    {

        $sql = "SELECT * FROM asm_client_account WHERE CAST(amount AS SIGNED)=0 AND CAST(invoiceid AS SIGNED)>=1000 AND clientid!=515";

        $records = Yii::$app->db2->createCommand($sql)->queryAll();

        foreach ($records as $record){

            $salesId = $record['invoiceid'];

            $this->loadReturnItems($salesId);

            $hasError = false;
            $model = new SalesReturn();
            $model->setScenario('verify');


            $account = CustomerAccount::find()->where(['sales_id' => $salesId])->orderBy('id DESC')->one();
            $account->paid_amount = ($account->sales->total_amount - $account->sales->discount_amount) - $account->balance;
            $account->due_amount = $account->balance;
            $account->discount_amount = $account->sales->discount_amount;
            $account->total_amount = $account->sales->total_amount;

            $salesModel = Sales::find()->where(['sales_id' => $salesId])->one();

            $salesTotalAmount = ($salesModel->total_amount - $salesModel->discount_amount);
            $salesTotalReceivedAmount = ($salesModel->received_amount + $salesModel->sales_return_amount + $salesModel->reconciliation_amount);

            if($salesTotalAmount>$salesTotalReceivedAmount){
                $dueAmount = $salesTotalAmount - $salesTotalReceivedAmount;
            }else{
                $dueAmount = 0;
            }

            $salesReturn = new SalesReturn();
            $salesReturn->created_at = $salesModel->created_at;
            $salesReturn->user_id = Yii::$app->user->getId();
            $salesReturn->type = SalesReturn::TYPE_RETURN;

            $bankReconciliation = BankReconciliation::find()->where(['invoice_id' => $salesId])->one();
            if ($bankReconciliation) {
                $salesModel->reconciliationAmount = (int)($bankReconciliation->amount);
                $salesReturn->remarks = $bankReconciliation->reconciliation->name . " Reconciliation ID# " . $bankReconciliation->id;
            }

            $itemWiseTotalRefund = ReturnDraft::getTotal($salesId);

            //Utility::debug($totalRefund);

            if ($dueAmount == $itemWiseTotalRefund) {
                $salesReturn->cut_off_amount = $dueAmount;
                $salesReturn->refund_amount = 0;
                $salesReturn->total_amount = $salesReturn->cut_off_amount;
                $salesReturn->due_amount = $dueAmount;
            } else if ($dueAmount > $itemWiseTotalRefund) {
                $salesReturn->cut_off_amount = $itemWiseTotalRefund;
                $salesReturn->refund_amount = 0;
                $salesReturn->total_amount = $salesReturn->cut_off_amount;
                $salesReturn->due_amount = $dueAmount - $salesReturn->cut_off_amount;
            } else if ($dueAmount < $itemWiseTotalRefund) {
                $salesReturn->cut_off_amount = $dueAmount;
                $salesReturn->refund_amount = $itemWiseTotalRefund - $dueAmount;
                $salesReturn->total_amount = $salesReturn->cut_off_amount + $salesReturn->refund_amount;
                $salesReturn->due_amount = 0;
            }

            $salesReturn->client_name = $salesModel->client->client_name;
            $salesReturn->client_id = $salesModel->client->client_id;
            $salesReturn->memo_id = $salesModel->memo_id;
            $salesReturn->client_mobile = $salesModel->client_mobile;
            $salesReturn->sales_id = $salesId;
            $salesReturn->soldDate = $salesModel->created_at;

            $products = ReturnDraft::find()->where(['user_id' => Yii::$app->user->getId(), 'sales_id' => $salesReturn->sales_id])->all();

            $salesReturn->load(Yii::$app->request->post());
            $salesReturn->status = SalesReturn::STATUS_PENDING;

            $transaction = Yii::$app->db->beginTransaction();

            try {
                if ($products) {
                    if ($salesReturn->save()) {
                        $salesReturnDetailsRows = [];
                        foreach ($products as $product) {
                            $salesDetailItems = SalesDetails::find()->where(['sales_id' => $salesId, 'size_id' => $product->size_id])->one();
                            $salesReturnDetailsRows[] = [
                                'sales_return_details_id' => null,
                                'sales_return_id' => $salesReturn->sales_return_id,
                                'sales_id' => $salesReturn->sales_id,
                                'item_id' => $product->item_id,
                                'brand_id' => $product->brand_id,
                                'size_id' => $product->size_id,
                                'refund_amount' => $product->refund_amount,
                                'sales_amount' => $salesDetailItems->sales_amount,
                                'total_amount' => $product->total_amount,
                                'quantity' => $product->quantity,
                            ];
                        }

                        $salesReturnDetails = new SalesReturnDetails();
                        $totalSalesDetailsInserted = Yii::$app->db->createCommand()->batchInsert(SalesReturnDetails::tableName(), $salesReturnDetails->attributes(), $salesReturnDetailsRows)->execute();
                        $totalRows = count($products);
                        if ($totalSalesDetailsInserted == $totalRows) {
                            $count = ReturnDraft::deleteAll("user_id = '" . Yii::$app->user->getId() . "' AND sales_id='" . $salesId . "'");
                            if ($count == $totalRows) {
                                $transaction->commit();
                            }
                        }
                    }
                }
            } catch (\Exception $e) {
                $transaction->rollBack();
                $hasError = true;
                throw $e;
            }

            $this->salesReturnApproved($salesReturn->sales_return_id);
        }
    }

    public function actionPaymentAdjustment()
    {
        //Need to optimize this for fast process.
        $this->paymentAdjust();
    }

    private function brandMapping()
    {

        $brandMax = BrandNew::find()->orderBy('id DESC')->one();
        $rows = [];
        $list = [];

       $brands = Brand::find()->orderBy('brand_name ASC')->all();
        foreach ($brands as $brand){
            $name = trim($brand->brand_name);
            $list[$name][] = ['name'=>$name, 'id'=>$brand->brand_id];
        }

        $max = ($brandMax->id+1);

        foreach ($list as $key=>$value){
          $items = [];
          foreach ($value as $k=>$v){
              array_push($items, $v['id']);
          }

            $rows[] = [
              'id'=>$max++,
              'name'=>$key,
              'status'=>BrandNew::STATUS_ACTIVE,
              'extra'=>Json::encode($items),
            ];
        }


        $model = new BrandNew();
        echo '<br>'."Start Inserting New Brand Mapping" . '<br>';
        $insert  = Yii::$app->db->createCommand()->batchInsert(BrandNew::tableName(), $model->attributes(), $rows)->execute();
        echo '<br>'."successfully inserted Brand Mapping table" . '<br>';

        echo '<br>'."{$insert} brand bas been created" . '<br>';

       if($insert){

           $brands = BrandNew::find()->where(['status'=>'Active'])->orderBy('name ASC')->all();
         
           foreach ($brands as $brand){

               $extra = Json::decode($brand->extra);
               $ids = implode(',', $extra);

               if(!empty($ids)){
                   $sql = "
                   UPDATE brand SET brand_id={$brand->id} WHERE brand_id IN ({$ids});
                   UPDATE size SET brand_id={$brand->id} WHERE brand_id IN ({$ids});
                   UPDATE product_statement SET brand_id={$brand->id} WHERE brand_id IN ({$ids});
                   UPDATE product_items_price SET brand_id={$brand->id} WHERE brand_id IN ({$ids});
                   UPDATE product_stock_items SET brand_id={$brand->id} WHERE brand_id IN ({$ids});
                   UPDATE sales_details SET brand_id={$brand->id} WHERE brand_id IN ({$ids});
                   UPDATE sales_return_details SET brand_id={$brand->id} WHERE brand_id IN ({$ids});";
                   Yii::$app->db->createCommand($sql)->execute();
               }else{
                   Utility::debug($brand, false);
               }
           }
       }

    }


    private function singleAmountDue()
    {

        $timezone = new DateTimeZone(SystemSettings::getTimeZone());
        $dateTime = new DateTime('Now');
        $date = $dateTime->modify('-1 days')->setTimezone($timezone)->format('Y-m-d');


        $invoiceBegan = 1;

        $customers = [];
        $itemId = $this->getItemIds();
        $brandId = $this->getBrandIds();
        $sizeId = $this->getSizeIds();



        $sql = "SELECT sum(amount) as sales, SUM(paid) as paid, SUM(due) as due, clientname, clientid FROM `asm_client_account` GROUP BY clientid ";
        $customerAccounts = Yii::$app->db2->createCommand($sql)->queryAll();
        foreach ($customerAccounts as $customerAccount){

            $sales = round( $customerAccount['sales']);
            $paid = round( $customerAccount['paid']);
            $due = round( $customerAccount['due']);

            if(($sales-$paid)>0){
                $customers[$customerAccount['clientid']] = [
                    'name'=>$customerAccount['clientname'],
                    'sales'=> round( $customerAccount['sales'], 2 ),
                    'paid'=> round( $customerAccount['paid'], 2 ),
                    'due'=> round( $customerAccount['due'], 2 ),
                ];

                $record = [
                    'date'=>$date,
                    'amount'=>$sales-$paid,
                    'clientid'=>$customerAccount['clientid'],
                    'invoiceid'=>$invoiceBegan++
                ];
                $this->createSales($record, $itemId, $brandId, $sizeId, 'One Invoice With All Dues');
            }
        }
    }

    public function actionImport()
    {

//         $this->Transport();
//         $this->Bank();
//         $this->City();
//         $this->Customer();
//         $this->Warehouse();
//         $this->Item();
//         $this->Brand();
//         $this->Size();
//         $this->LC();
//         $this->ProductUnit();
//         die();



        //$this->salesInvoice();
        //$this->salesInvoiceDetails();

        //$this->expense();

//        $this->cashHandReceived();
//        $this->withdraw();

//        $this->dueReceivedByCash();
//        $this->bankDueReceived();

//        $this->findSalesReturnInvoice();
//        $this->oldDuesAsSales();

        //$this->Product();


        //$brand = Brand::find()->select('max()')

//
        $this->brandMapping();

        //die();







        //Done to Migration.
        //This really not required for us.
        //$this->cashSummery();


        //Payment for Auto or Manual Mode.
        //$this->paymentDiff();

        //Under this function use for automatic payment adjustment.
        //$this->paymentAdjust();

    }

    public function actionImportFresh()
    {

//         $this->Transport();
//         $this->Bank();
//         $this->City();
//         $this->Customer();
//         $this->Warehouse();
//         $this->Item();
//         $this->Brand();
//         $this->Size();
//         $this->LC();
//         $this->ProductUnit();
//         $this->Product();


         //$this->singleAmountDue();

         //$this->brandMapping();

    }


}
